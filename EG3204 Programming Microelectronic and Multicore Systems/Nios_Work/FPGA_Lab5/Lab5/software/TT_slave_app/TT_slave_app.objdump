
TT_slave_app.elf:     file format elf32-littlenios2
TT_slave_app.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000110c memsz 0x0000110c flags r-x
    LOAD off    0x0000212c vaddr 0x0000112c paddr 0x0000113c align 2**12
         filesz 0x00000010 memsz 0x00000010 flags rw-
    LOAD off    0x0000214c vaddr 0x0000114c paddr 0x0000114c align 2**12
         filesz 0x00000000 memsz 0x00000144 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000f60  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000014  00001118  00001118  00002118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000010  0000112c  0000113c  0000212c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000144  0000114c  0000114c  0000214c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000002b8  00000000  00000000  00002160  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001d36  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000d91  00000000  00000000  0000414e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000fd7  00000000  00000000  00004edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000004ac  00000000  00000000  00005eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000a22  00000000  00000000  00006364  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000701  00000000  00000000  00006d86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00007488  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000b8  00000000  00000000  00007498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00008829  2**0
                  CONTENTS, READONLY
 17 .cpu          00000007  00000000  00000000  0000882c  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00008833  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00008834  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000004  00000000  00000000  00008835  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000004  00000000  00000000  00008839  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000004  00000000  00000000  0000883d  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000004  00000000  00000000  00008841  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000039  00000000  00000000  00008845  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00092841  00000000  00000000  0000887e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
00001118 l    d  .rodata	00000000 .rodata
0000112c l    d  .rwdata	00000000 .rwdata
0000114c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../TT_slave_app_bsp//obj/HAL/src/crt0.o
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 2_50_XXg.c
000002b4 l     F .text	0000014c SCH_Update
00000000 l    df *ABS*	00000000 Main.c
00000000 l    df *ABS*	00000000 Sch51.c
00000724 l     F .text	0000001c SCH_Go_To_Sleep
00000000 l    df *ABS*	00000000 LED_flas.c
00000000 l    df *ABS*	00000000 SharedMem_Mutex.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000b88 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00000c74 l     F .text	00000050 alt_get_errno
00000cc4 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 
00000400 g     F .text	00000050 alt_main
00001190 g     O .bss	00000100 alt_irq
0000113c g       *ABS*	00000000 __flash_rwdata_start
000001f4 g     F .text	0000009c SCH_Init_T0
00000df4 g     F .text	00000040 altera_avalon_mutex_trylock
0000114c g     O .bss	00000001 Error_code_G
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000e84 g     F .text	00000074 altera_avalon_mutex_is_mine
00000020 g       *ABS*	00000000 __flash_exceptions_start
00001160 g     O .bss	00000004 errno
00001164 g     O .bss	00000020 SCH_tasks_G
0000912c g       *ABS*	00000000 _gp
0000078c g     F .text	00000044 SharedMem_Init
00000f64 g     F .text	00000090 alt_find_dev
00000000 g       *ABS*	00000000 __alt_mem_TT_core_memory
00000290 g     F .text	00000024 SCH_Start
00000ef8 g     F .text	00000050 altera_avalon_mutex_first_lock
000007d0 g     F .text	000000f0 SharedMem_Update
00001290 g       *ABS*	00000000 __bss_end
00000a98 g     F .text	000000f0 alt_iic_isr_register
00001150 g     O .bss	00000004 cpu_id
00001154 g     O .bss	00000004 message
00000a4c g     F .text	0000004c alt_ic_irq_enabled
0000115c g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000cc alt_irq_handler
00000d40 g     F .text	00000050 altera_avalon_mutex_open
00000f48 g     F .text	0000001c alt_dcache_flush_all
0000113c g       *ABS*	00000000 __ram_rwdata_end
00001130 g     O .rwdata	00000008 alt_mutex_list
0000112c g       *ABS*	00000000 __ram_rodata_end
00000708 g     F .text	0000001c SCH_Report_Status
00001158 g     O .bss	00000004 mutex
00001290 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
000001b8 g     F .text	0000003c _start
00000e34 g     F .text	00000050 altera_avalon_mutex_unlock
0000075c g     F .text	00000030 LED_Flash_Update
0000112c g       *ABS*	00000000 __ram_rwdata_start
00001118 g       *ABS*	00000000 __ram_rodata_start
00001010 g     F .text	0000007c memcmp
00001290 g       *ABS*	00000000 __alt_stack_base
00000450 g     F .text	000000f4 SCH_Dispatch_Tasks
0000114c g       *ABS*	00000000 __bss_start
00000000         *UND*	00000000 main
00000740 g     F .text	0000001c LED_Flash_Init
00000db4 g     F .text	00000040 altera_avalon_mutex_lock
00001138 g     O .rwdata	00000004 alt_errno
00001118 g       *ABS*	00000000 __flash_rodata_start
00000020 g       .exceptions	00000000 alt_irq_entry
00001184 g     O .bss	0000000a RxBuff
00000020 g       *ABS*	00000000 __ram_exceptions_start
000008c0 g     F .text	00000050 alt_ic_isr_register
0000113c g       *ABS*	00000000 _edata
00000640 g     F .text	000000c8 SCH_Delete_Task
00001290 g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
000009ac g     F .text	000000a0 alt_ic_irq_disable
00000544 g     F .text	000000fc SCH_Add_Task
00004000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000108c g     F .text	0000008c strlen
00000ff4 g     F .text	0000001c alt_icache_flush_all
0000112c g     O .rwdata	00000004 alt_priority_mask
00000910 g     F .text	0000009c alt_ic_irq_enable
00000d90 g     F .text	00000024 altera_avalon_mutex_close
00009000 g       *ABS*	00000000 __alt_mem_msg_buf_ram
00000bf4 g     F .text	00000080 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406e14 	ori	at,at,440
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001726 	beq	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00c00034 	movhi	r3,0
 130:	18c46404 	addi	r3,r3,4496
 134:	e0bffd17 	ldw	r2,-12(fp)
 138:	100490fa 	slli	r2,r2,3
 13c:	1885883a 	add	r2,r3,r2
 140:	10c00017 	ldw	r3,0(r2)
 144:	01000034 	movhi	r4,0
 148:	21046404 	addi	r4,r4,4496
 14c:	e0bffd17 	ldw	r2,-12(fp)
 150:	100490fa 	slli	r2,r2,3
 154:	2085883a 	add	r2,r4,r2
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	103fe31e 	bne	r2,zero,110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffc17 	ldw	r2,-16(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fde06 	br	11c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
     1c0:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1c4:	d6a44b14 	ori	gp,gp,37164
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1cc:	10845314 	ori	r2,r2,4428

    movhi r3, %hi(__bss_end)
     1d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d4:	18c4a414 	ori	r3,r3,4752

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	0000bf40 	call	bf4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	00004000 	call	400 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <SCH_Init_T0>:
  
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/
void SCH_Init_T0(void)
   {
     1f4:	defffc04 	addi	sp,sp,-16
     1f8:	dfc00315 	stw	ra,12(sp)
     1fc:	df000215 	stw	fp,8(sp)
     200:	df000204 	addi	fp,sp,8


   tByte i;

   for (i = 0; i < SCH_MAX_TASKS; i++) 
     204:	e03fff05 	stb	zero,-4(fp)
     208:	00000606 	br	224 <SCH_Init_T0+0x30>
      {
      SCH_Delete_Task(i);
     20c:	e0bfff03 	ldbu	r2,-4(fp)
     210:	1009883a 	mov	r4,r2
     214:	00006400 	call	640 <SCH_Delete_Task>
   {


   tByte i;

   for (i = 0; i < SCH_MAX_TASKS; i++) 
     218:	e0bfff03 	ldbu	r2,-4(fp)
     21c:	10800044 	addi	r2,r2,1
     220:	e0bfff05 	stb	r2,-4(fp)
     224:	e0bfff03 	ldbu	r2,-4(fp)
     228:	108000b0 	cmpltui	r2,r2,2
     22c:	103ff71e 	bne	r2,zero,20c <SCH_Init_T0+0x18>
      }

   // Reset the global error variable
   // - SCH_Delete_Task() will generate an error code, 
   //   (because the task array is empty)
   Error_code_G = 0;
     230:	00800034 	movhi	r2,0
     234:	10845304 	addi	r2,r2,4428
     238:	10000005 	stb	zero,0(r2)
   // Now set up the interval timer
   // The required overflow is 0.050 seconds (50 ms)
   // IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, (((50 * (TIMER_0_FREQ) / 1000) - 1) >> 16) & 0xFFFF);
   //IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, ( (50 * (TIMER_0_FREQ) / 1000) - 1)        & 0xFFFF);

   IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, (alt_u16) (((50000 - 1) >> 16) & 0xFFFF)); //for 1 ms
     23c:	0007883a 	mov	r3,zero
     240:	00a50314 	movui	r2,37900
     244:	10c00035 	stwio	r3,0(r2)
   IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, (alt_u16) ((50000 - 1)  & 0xFFFF));
     248:	00f0d3d4 	movui	r3,49999
     24c:	00a50214 	movui	r2,37896
     250:	10c00035 	stwio	r3,0(r2)

   IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,
     254:	00c001c4 	movi	r3,7
     258:	00a50114 	movui	r2,37892
     25c:	10c00035 	stwio	r3,0(r2)
		   (0x1 << ALTERA_AVALON_TIMER_CONTROL_START_OFST) | // Start
		   (0x1 << ALTERA_AVALON_TIMER_CONTROL_CONT_OFST ) | // Continuous
		   (0x1 << ALTERA_AVALON_TIMER_CONTROL_ITO_OFST  )); // Generate interrupts

   alt_ic_isr_register(0, TIMER_0_IRQ, SCH_Update, 0, 0);
     260:	d8000015 	stw	zero,0(sp)
     264:	0009883a 	mov	r4,zero
     268:	000b883a 	mov	r5,zero
     26c:	01800034 	movhi	r6,0
     270:	3180ad04 	addi	r6,r6,692
     274:	000f883a 	mov	r7,zero
     278:	00008c00 	call	8c0 <alt_ic_isr_register>
   }
     27c:	e037883a 	mov	sp,fp
     280:	dfc00117 	ldw	ra,4(sp)
     284:	df000017 	ldw	fp,0(sp)
     288:	dec00204 	addi	sp,sp,8
     28c:	f800283a 	ret

00000290 <SCH_Start>:

  NOTE: ONLY THE SCHEDULER INTERRUPT SHOULD BE ENABLED!!! 
 
-*------------------------------------------------------------------*/
void SCH_Start(void) 
   {
     290:	deffff04 	addi	sp,sp,-4
     294:	df000015 	stw	fp,0(sp)
     298:	d839883a 	mov	fp,sp
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     29c:	00800044 	movi	r2,1
     2a0:	1001703a 	wrctl	status,r2
	alt_irq_cpu_enable_interrupts();
   }
     2a4:	e037883a 	mov	sp,fp
     2a8:	df000017 	ldw	fp,0(sp)
     2ac:	dec00104 	addi	sp,sp,4
     2b0:	f800283a 	ret

000002b4 <SCH_Update>:
  This version is triggered by the interval timer interrupts:
  the timer is automatically reloaded.

-*------------------------------------------------------------------*/
void SCH_Update(void * context)
   {
     2b4:	defffd04 	addi	sp,sp,-12
     2b8:	df000215 	stw	fp,8(sp)
     2bc:	df000204 	addi	fp,sp,8
     2c0:	e13fff15 	stw	r4,-4(fp)
   tByte Index;

   IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,
     2c4:	00a50014 	movui	r2,37888
     2c8:	10c00037 	ldwio	r3,0(r2)
     2cc:	00bfff84 	movi	r2,-2
     2d0:	1886703a 	and	r3,r3,r2
     2d4:	00a50014 	movui	r2,37888
     2d8:	10c00035 	stwio	r3,0(r2)
		   IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE) &
		   ~ALTERA_AVALON_TIMER_STATUS_TO_MSK); // Clear TO (timeout)
 
   // NOTE: calculations are in *TICKS* (not milliseconds)
   for (Index = 0; Index < SCH_MAX_TASKS; Index++)
     2dc:	e03ffe05 	stb	zero,-8(fp)
     2e0:	00004006 	br	3e4 <SCH_Update+0x130>
      {
      // Check if there is a task at this location
      if (SCH_tasks_G[Index].pTask)
     2e4:	e0bffe03 	ldbu	r2,-8(fp)
     2e8:	00c00034 	movhi	r3,0
     2ec:	18c45904 	addi	r3,r3,4452
     2f0:	1004913a 	slli	r2,r2,4
     2f4:	1885883a 	add	r2,r3,r2
     2f8:	10800017 	ldw	r2,0(r2)
     2fc:	10003626 	beq	r2,zero,3d8 <SCH_Update+0x124>
         {
         if (SCH_tasks_G[Index].Delay == 0)
     300:	e0bffe03 	ldbu	r2,-8(fp)
     304:	00c00034 	movhi	r3,0
     308:	18c45904 	addi	r3,r3,4452
     30c:	1004913a 	slli	r2,r2,4
     310:	1885883a 	add	r2,r3,r2
     314:	10800104 	addi	r2,r2,4
     318:	10800017 	ldw	r2,0(r2)
     31c:	10001f1e 	bne	r2,zero,39c <SCH_Update+0xe8>
            {
            // The task is due to run
            SCH_tasks_G[Index].RunMe = 1;  // Set the run flag
     320:	e0bffe03 	ldbu	r2,-8(fp)
     324:	00c00034 	movhi	r3,0
     328:	18c45904 	addi	r3,r3,4452
     32c:	1004913a 	slli	r2,r2,4
     330:	1885883a 	add	r2,r3,r2
     334:	10800304 	addi	r2,r2,12
     338:	00c00044 	movi	r3,1
     33c:	10c00005 	stb	r3,0(r2)

            if (SCH_tasks_G[Index].Period)
     340:	e0bffe03 	ldbu	r2,-8(fp)
     344:	00c00034 	movhi	r3,0
     348:	18c45904 	addi	r3,r3,4452
     34c:	1004913a 	slli	r2,r2,4
     350:	1885883a 	add	r2,r3,r2
     354:	10800204 	addi	r2,r2,8
     358:	10800017 	ldw	r2,0(r2)
     35c:	10001e26 	beq	r2,zero,3d8 <SCH_Update+0x124>
               {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
     360:	e0bffe03 	ldbu	r2,-8(fp)
     364:	e0fffe03 	ldbu	r3,-8(fp)
     368:	01000034 	movhi	r4,0
     36c:	21045904 	addi	r4,r4,4452
     370:	1806913a 	slli	r3,r3,4
     374:	20c7883a 	add	r3,r4,r3
     378:	18c00204 	addi	r3,r3,8
     37c:	18c00017 	ldw	r3,0(r3)
     380:	01000034 	movhi	r4,0
     384:	21045904 	addi	r4,r4,4452
     388:	1004913a 	slli	r2,r2,4
     38c:	2085883a 	add	r2,r4,r2
     390:	10800104 	addi	r2,r2,4
     394:	10c00015 	stw	r3,0(r2)
     398:	00000f06 	br	3d8 <SCH_Update+0x124>
               }
            }
         else
            {
            // Not yet ready to run: just decrement the delay 
            SCH_tasks_G[Index].Delay -= 1;
     39c:	e0bffe03 	ldbu	r2,-8(fp)
     3a0:	e0fffe03 	ldbu	r3,-8(fp)
     3a4:	01000034 	movhi	r4,0
     3a8:	21045904 	addi	r4,r4,4452
     3ac:	1806913a 	slli	r3,r3,4
     3b0:	20c7883a 	add	r3,r4,r3
     3b4:	18c00104 	addi	r3,r3,4
     3b8:	18c00017 	ldw	r3,0(r3)
     3bc:	18ffffc4 	addi	r3,r3,-1
     3c0:	01000034 	movhi	r4,0
     3c4:	21045904 	addi	r4,r4,4452
     3c8:	1004913a 	slli	r2,r2,4
     3cc:	2085883a 	add	r2,r4,r2
     3d0:	10800104 	addi	r2,r2,4
     3d4:	10c00015 	stw	r3,0(r2)
   IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,
		   IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE) &
		   ~ALTERA_AVALON_TIMER_STATUS_TO_MSK); // Clear TO (timeout)
 
   // NOTE: calculations are in *TICKS* (not milliseconds)
   for (Index = 0; Index < SCH_MAX_TASKS; Index++)
     3d8:	e0bffe03 	ldbu	r2,-8(fp)
     3dc:	10800044 	addi	r2,r2,1
     3e0:	e0bffe05 	stb	r2,-8(fp)
     3e4:	e0bffe03 	ldbu	r2,-8(fp)
     3e8:	108000b0 	cmpltui	r2,r2,2
     3ec:	103fbd1e 	bne	r2,zero,2e4 <SCH_Update+0x30>
            // Not yet ready to run: just decrement the delay 
            SCH_tasks_G[Index].Delay -= 1;
            }
         }         
      }
   }   
     3f0:	e037883a 	mov	sp,fp
     3f4:	df000017 	ldw	fp,0(sp)
     3f8:	dec00104 	addi	sp,sp,4
     3fc:	f800283a 	ret

00000400 <alt_main>:

/* ............................................................... */
/* ............................................................... */

void alt_main(void)
   {
     400:	defffe04 	addi	sp,sp,-8
     404:	dfc00115 	stw	ra,4(sp)
     408:	df000015 	stw	fp,0(sp)
     40c:	d839883a 	mov	fp,sp

	// Set up the scheduler
	SCH_Init_T0();
     410:	00001f40 	call	1f4 <SCH_Init_T0>

	// Prepare for the 'Flash_LED' task
	LED_Flash_Init();
     414:	00007400 	call	740 <LED_Flash_Init>

	// Set up for Shared Memory in dual processors
	SharedMem_Init();
     418:	000078c0 	call	78c <SharedMem_Init>

	// Add the 'Flash LED' task (on for ~1000 ms, off for ~1000 ms)
	// - timings are in ticks (50 ms tick interval)
	// (Max interval / delay is 65535 ticks)
	SCH_Add_Task(SharedMem_Update, 1, 16);
     41c:	01000034 	movhi	r4,0
     420:	2101f404 	addi	r4,r4,2000
     424:	01400044 	movi	r5,1
     428:	01800404 	movi	r6,16
     42c:	00005440 	call	544 <SCH_Add_Task>
	SCH_Add_Task(LED_Flash_Update, 0, 500);
     430:	01000034 	movhi	r4,0
     434:	2101d704 	addi	r4,r4,1884
     438:	000b883a 	mov	r5,zero
     43c:	01807d04 	movi	r6,500
     440:	00005440 	call	544 <SCH_Add_Task>

	// Start the scheduler
	SCH_Start();
     444:	00002900 	call	290 <SCH_Start>

	while(1)
      {
      SCH_Dispatch_Tasks();
     448:	00004500 	call	450 <SCH_Dispatch_Tasks>

      }
     44c:	003ffe06 	br	448 <alt_main+0x48>

00000450 <SCH_Dispatch_Tasks>:
  is due to run, SCH_Dispatch_Tasks() will run it.
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/
void SCH_Dispatch_Tasks(void) 
   {
     450:	defffd04 	addi	sp,sp,-12
     454:	dfc00215 	stw	ra,8(sp)
     458:	df000115 	stw	fp,4(sp)
     45c:	df000104 	addi	fp,sp,4
   tByte Index;

   // Dispatches (runs) the next task (if one is ready)
   for (Index = 0; Index < SCH_MAX_TASKS; Index++)
     460:	e03fff05 	stb	zero,-4(fp)
     464:	00002d06 	br	51c <SCH_Dispatch_Tasks+0xcc>
      {
      if (SCH_tasks_G[Index].RunMe > 0) 
     468:	e0bfff03 	ldbu	r2,-4(fp)
     46c:	00c00034 	movhi	r3,0
     470:	18c45904 	addi	r3,r3,4452
     474:	1004913a 	slli	r2,r2,4
     478:	1885883a 	add	r2,r3,r2
     47c:	10800304 	addi	r2,r2,12
     480:	10800003 	ldbu	r2,0(r2)
     484:	10803fcc 	andi	r2,r2,255
     488:	10002126 	beq	r2,zero,510 <SCH_Dispatch_Tasks+0xc0>
         {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
     48c:	e0bfff03 	ldbu	r2,-4(fp)
     490:	00c00034 	movhi	r3,0
     494:	18c45904 	addi	r3,r3,4452
     498:	1004913a 	slli	r2,r2,4
     49c:	1885883a 	add	r2,r3,r2
     4a0:	10800017 	ldw	r2,0(r2)
     4a4:	103ee83a 	callr	r2

         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
     4a8:	e0bfff03 	ldbu	r2,-4(fp)
     4ac:	e0ffff03 	ldbu	r3,-4(fp)
     4b0:	01000034 	movhi	r4,0
     4b4:	21045904 	addi	r4,r4,4452
     4b8:	1806913a 	slli	r3,r3,4
     4bc:	20c7883a 	add	r3,r4,r3
     4c0:	18c00304 	addi	r3,r3,12
     4c4:	18c00003 	ldbu	r3,0(r3)
     4c8:	18ffffc4 	addi	r3,r3,-1
     4cc:	01000034 	movhi	r4,0
     4d0:	21045904 	addi	r4,r4,4452
     4d4:	1004913a 	slli	r2,r2,4
     4d8:	2085883a 	add	r2,r4,r2
     4dc:	10800304 	addi	r2,r2,12
     4e0:	10c00005 	stb	r3,0(r2)

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if (SCH_tasks_G[Index].Period == 0)
     4e4:	e0bfff03 	ldbu	r2,-4(fp)
     4e8:	00c00034 	movhi	r3,0
     4ec:	18c45904 	addi	r3,r3,4452
     4f0:	1004913a 	slli	r2,r2,4
     4f4:	1885883a 	add	r2,r3,r2
     4f8:	10800204 	addi	r2,r2,8
     4fc:	10800017 	ldw	r2,0(r2)
     500:	1000031e 	bne	r2,zero,510 <SCH_Dispatch_Tasks+0xc0>
            {
            SCH_Delete_Task(Index);
     504:	e0bfff03 	ldbu	r2,-4(fp)
     508:	1009883a 	mov	r4,r2
     50c:	00006400 	call	640 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void) 
   {
   tByte Index;

   // Dispatches (runs) the next task (if one is ready)
   for (Index = 0; Index < SCH_MAX_TASKS; Index++)
     510:	e0bfff03 	ldbu	r2,-4(fp)
     514:	10800044 	addi	r2,r2,1
     518:	e0bfff05 	stb	r2,-4(fp)
     51c:	e0bfff03 	ldbu	r2,-4(fp)
     520:	108000b0 	cmpltui	r2,r2,2
     524:	103fd01e 	bne	r2,zero,468 <SCH_Dispatch_Tasks+0x18>
            }
         }
      }

   // Report system status
   SCH_Report_Status();  
     528:	00007080 	call	708 <SCH_Report_Status>

   // The scheduler enters idle mode at this point 
   SCH_Go_To_Sleep();          
     52c:	00007240 	call	724 <SCH_Go_To_Sleep>
   }
     530:	e037883a 	mov	sp,fp
     534:	dfc00117 	ldw	ra,4(sp)
     538:	df000017 	ldw	fp,0(sp)
     53c:	dec00204 	addi	sp,sp,8
     540:	f800283a 	ret

00000544 <SCH_Add_Task>:
 
-*------------------------------------------------------------------*/
tByte SCH_Add_Task(void (* pFunction)(),
                   const tWord DELAY, 
                   const tWord PERIOD)    
   {
     544:	defffb04 	addi	sp,sp,-20
     548:	df000415 	stw	fp,16(sp)
     54c:	df000404 	addi	fp,sp,16
     550:	e13ffd15 	stw	r4,-12(fp)
     554:	e17ffe15 	stw	r5,-8(fp)
     558:	e1bfff15 	stw	r6,-4(fp)
   tByte Index = 0;
     55c:	e03ffc05 	stb	zero,-16(fp)
   
   // First find a gap in the array (if there is one)
   while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
     560:	00000306 	br	570 <SCH_Add_Task+0x2c>
      {
      Index++;
     564:	e0bffc03 	ldbu	r2,-16(fp)
     568:	10800044 	addi	r2,r2,1
     56c:	e0bffc05 	stb	r2,-16(fp)
                   const tWord PERIOD)    
   {
   tByte Index = 0;
   
   // First find a gap in the array (if there is one)
   while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
     570:	e0bffc03 	ldbu	r2,-16(fp)
     574:	00c00034 	movhi	r3,0
     578:	18c45904 	addi	r3,r3,4452
     57c:	1004913a 	slli	r2,r2,4
     580:	1885883a 	add	r2,r3,r2
     584:	10800017 	ldw	r2,0(r2)
     588:	10000326 	beq	r2,zero,598 <SCH_Add_Task+0x54>
     58c:	e0bffc03 	ldbu	r2,-16(fp)
     590:	108000b0 	cmpltui	r2,r2,2
     594:	103ff31e 	bne	r2,zero,564 <SCH_Add_Task+0x20>
      {
      Index++;
      } 
   
   // Have we reached the end of the list?   
   if (Index == SCH_MAX_TASKS)
     598:	e0bffc03 	ldbu	r2,-16(fp)
     59c:	10800098 	cmpnei	r2,r2,2
     5a0:	1000041e 	bne	r2,zero,5b4 <SCH_Add_Task+0x70>
      {
      // Task list is full
      //
      // Set the global error variable
      Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
     5a4:	00800044 	movi	r2,1
     5a8:	d0a00805 	stb	r2,-32736(gp)

      // Also return an error code
      return SCH_MAX_TASKS;  
     5ac:	00800084 	movi	r2,2
     5b0:	00001f06 	br	630 <SCH_Add_Task+0xec>
      }
      
   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask  = pFunction;
     5b4:	e0bffc03 	ldbu	r2,-16(fp)
     5b8:	00c00034 	movhi	r3,0
     5bc:	18c45904 	addi	r3,r3,4452
     5c0:	1004913a 	slli	r2,r2,4
     5c4:	1885883a 	add	r2,r3,r2
     5c8:	e0fffd17 	ldw	r3,-12(fp)
     5cc:	10c00015 	stw	r3,0(r2)
     
   SCH_tasks_G[Index].Delay  = DELAY;
     5d0:	e0bffc03 	ldbu	r2,-16(fp)
     5d4:	00c00034 	movhi	r3,0
     5d8:	18c45904 	addi	r3,r3,4452
     5dc:	1004913a 	slli	r2,r2,4
     5e0:	1885883a 	add	r2,r3,r2
     5e4:	10800104 	addi	r2,r2,4
     5e8:	e0fffe17 	ldw	r3,-8(fp)
     5ec:	10c00015 	stw	r3,0(r2)
   SCH_tasks_G[Index].Period = PERIOD;
     5f0:	e0bffc03 	ldbu	r2,-16(fp)
     5f4:	00c00034 	movhi	r3,0
     5f8:	18c45904 	addi	r3,r3,4452
     5fc:	1004913a 	slli	r2,r2,4
     600:	1885883a 	add	r2,r3,r2
     604:	10800204 	addi	r2,r2,8
     608:	e0ffff17 	ldw	r3,-4(fp)
     60c:	10c00015 	stw	r3,0(r2)

   SCH_tasks_G[Index].RunMe  = 0;
     610:	e0bffc03 	ldbu	r2,-16(fp)
     614:	00c00034 	movhi	r3,0
     618:	18c45904 	addi	r3,r3,4452
     61c:	1004913a 	slli	r2,r2,4
     620:	1885883a 	add	r2,r3,r2
     624:	10800304 	addi	r2,r2,12
     628:	10000005 	stb	zero,0(r2)

   return Index; // return position of task (to allow later deletion)
     62c:	e0bffc03 	ldbu	r2,-16(fp)
   }
     630:	e037883a 	mov	sp,fp
     634:	df000017 	ldw	fp,0(sp)
     638:	dec00104 	addi	sp,sp,4
     63c:	f800283a 	ret

00000640 <SCH_Delete_Task>:

  RETURN VALUE:  RETURN_ERROR or RETURN_NORMAL

-*------------------------------------------------------------------*/
tByte SCH_Delete_Task(const tByte TASK_INDEX)
   {
     640:	defffd04 	addi	sp,sp,-12
     644:	df000215 	stw	fp,8(sp)
     648:	df000204 	addi	fp,sp,8
     64c:	2005883a 	mov	r2,r4
     650:	e0bfff05 	stb	r2,-4(fp)
	tByte Return_code;

   if (SCH_tasks_G[TASK_INDEX].pTask == 0)
     654:	e0bfff03 	ldbu	r2,-4(fp)
     658:	00c00034 	movhi	r3,0
     65c:	18c45904 	addi	r3,r3,4452
     660:	1004913a 	slli	r2,r2,4
     664:	1885883a 	add	r2,r3,r2
     668:	10800017 	ldw	r2,0(r2)
     66c:	1000051e 	bne	r2,zero,684 <SCH_Delete_Task+0x44>
      {
      // No task at this location...
      //
      // Set the global error variable
      Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
     670:	00800084 	movi	r2,2
     674:	d0a00805 	stb	r2,-32736(gp)

      // ...also return an error code
      Return_code = RETURN_ERROR;
     678:	00800044 	movi	r2,1
     67c:	e0bffe05 	stb	r2,-8(fp)
     680:	00000106 	br	688 <SCH_Delete_Task+0x48>
      }
   else
      {
      Return_code = RETURN_NORMAL;
     684:	e03ffe05 	stb	zero,-8(fp)
      }      
   
   SCH_tasks_G[TASK_INDEX].pTask   = 0x0000;
     688:	e0bfff03 	ldbu	r2,-4(fp)
     68c:	00c00034 	movhi	r3,0
     690:	18c45904 	addi	r3,r3,4452
     694:	1004913a 	slli	r2,r2,4
     698:	1885883a 	add	r2,r3,r2
     69c:	10000015 	stw	zero,0(r2)
   SCH_tasks_G[TASK_INDEX].Delay   = 0;
     6a0:	e0bfff03 	ldbu	r2,-4(fp)
     6a4:	00c00034 	movhi	r3,0
     6a8:	18c45904 	addi	r3,r3,4452
     6ac:	1004913a 	slli	r2,r2,4
     6b0:	1885883a 	add	r2,r3,r2
     6b4:	10800104 	addi	r2,r2,4
     6b8:	10000015 	stw	zero,0(r2)
   SCH_tasks_G[TASK_INDEX].Period  = 0;
     6bc:	e0bfff03 	ldbu	r2,-4(fp)
     6c0:	00c00034 	movhi	r3,0
     6c4:	18c45904 	addi	r3,r3,4452
     6c8:	1004913a 	slli	r2,r2,4
     6cc:	1885883a 	add	r2,r3,r2
     6d0:	10800204 	addi	r2,r2,8
     6d4:	10000015 	stw	zero,0(r2)

   SCH_tasks_G[TASK_INDEX].RunMe   = 0;
     6d8:	e0bfff03 	ldbu	r2,-4(fp)
     6dc:	00c00034 	movhi	r3,0
     6e0:	18c45904 	addi	r3,r3,4452
     6e4:	1004913a 	slli	r2,r2,4
     6e8:	1885883a 	add	r2,r3,r2
     6ec:	10800304 	addi	r2,r2,12
     6f0:	10000005 	stb	zero,0(r2)

   return Return_code;       // return status
     6f4:	e0bffe03 	ldbu	r2,-8(fp)
   }
     6f8:	e037883a 	mov	sp,fp
     6fc:	df000017 	ldw	fp,0(sp)
     700:	dec00104 	addi	sp,sp,4
     704:	f800283a 	ret

00000708 <SCH_Report_Status>:

  See Chapter 10 for further information.

-*------------------------------------------------------------------*/
void SCH_Report_Status(void)
   {
     708:	deffff04 	addi	sp,sp,-4
     70c:	df000015 	stw	fp,0(sp)
     710:	d839883a 	mov	fp,sp
            Error_code_G = 0; // Reset error code
            }
         }
      }
#endif
   }
     714:	e037883a 	mov	sp,fp
     718:	df000017 	ldw	fp,0(sp)
     71c:	dec00104 	addi	sp,sp,4
     720:	f800283a 	ret

00000724 <SCH_Go_To_Sleep>:

  *** ADAPT AS REQUIRED FOR YOUR HARDWARE ***

-*------------------------------------------------------------------*/
void SCH_Go_To_Sleep()
   {
     724:	deffff04 	addi	sp,sp,-4
     728:	df000015 	stw	fp,0(sp)
     72c:	d839883a 	mov	fp,sp
   // Do nothing
   }
     730:	e037883a 	mov	sp,fp
     734:	df000017 	ldw	fp,0(sp)
     738:	dec00104 	addi	sp,sp,4
     73c:	f800283a 	ret

00000740 <LED_Flash_Init>:

  - See below.

-*------------------------------------------------------------------*/
void LED_Flash_Init(void)
   {
     740:	deffff04 	addi	sp,sp,-4
     744:	df000015 	stw	fp,0(sp)
     748:	d839883a 	mov	fp,sp
   // Do nothing
   }
     74c:	e037883a 	mov	sp,fp
     750:	df000017 	ldw	fp,0(sp)
     754:	dec00104 	addi	sp,sp,4
     758:	f800283a 	ret

0000075c <LED_Flash_Update>:
  flash (on for 0.5 seconds, off for 0.5 seconds) must schedule
  at 2 Hz.

-*------------------------------------------------------------------*/
void LED_Flash_Update(void)
   {
     75c:	deffff04 	addi	sp,sp,-4
     760:	df000015 	stw	fp,0(sp)
     764:	d839883a 	mov	fp,sp
   // Change the LED from OFF to ON (or vice versa)
   IOWR_ALTERA_AVALON_PIO_DATA(TT_LEDS_BASE,
     768:	00a50c14 	movui	r2,37936
     76c:	10800037 	ldwio	r2,0(r2)
     770:	10c0011c 	xori	r3,r2,4
     774:	00a50c14 	movui	r2,37936
     778:	10c00035 	stwio	r3,0(r2)
        IORD_ALTERA_AVALON_PIO_DATA(TT_LEDS_BASE) ^ LED2_pin);


   }
     77c:	e037883a 	mov	sp,fp
     780:	df000017 	ldw	fp,0(sp)
     784:	dec00104 	addi	sp,sp,4
     788:	f800283a 	ret

0000078c <SharedMem_Init>:

  - See below.

-*------------------------------------------------------------------*/
void SharedMem_Init(void)
   {
     78c:	defffe04 	addi	sp,sp,-8
     790:	dfc00115 	stw	ra,4(sp)
     794:	df000015 	stw	fp,0(sp)
     798:	d839883a 	mov	fp,sp

	// Get the CPU ID
	cpu_id = NIOS2_CPU_ID_VALUE;
     79c:	00800044 	movi	r2,1
     7a0:	d0a00915 	stw	r2,-32732(gp)

	// Initialise the message buffer location
	message = (message_buffer_struct*)MESSAGE_BUFFER_BASE;
     7a4:	00a40014 	movui	r2,36864
     7a8:	d0a00a15 	stw	r2,-32728(gp)

	// Open the real mutex to share a message buffer which is shared by TT_Core and ET_Core.
	mutex = altera_avalon_mutex_open(MSG_BUF_MUTEX_NAME);
     7ac:	01000034 	movhi	r4,0
     7b0:	21044604 	addi	r4,r4,4376
     7b4:	0000d400 	call	d40 <altera_avalon_mutex_open>
     7b8:	d0a00b15 	stw	r2,-32724(gp)

   }
     7bc:	e037883a 	mov	sp,fp
     7c0:	dfc00117 	ldw	ra,4(sp)
     7c4:	df000017 	ldw	fp,0(sp)
     7c8:	dec00204 	addi	sp,sp,8
     7cc:	f800283a 	ret

000007d0 <SharedMem_Update>:
  flash (on for 0.5 seconds, off for 0.5 seconds) must schedule
  at 2 Hz.

-*------------------------------------------------------------------*/
void SharedMem_Update(void)
   {
     7d0:	defffe04 	addi	sp,sp,-8
     7d4:	dfc00115 	stw	ra,4(sp)
     7d8:	df000015 	stw	fp,0(sp)
     7dc:	d839883a 	mov	fp,sp

		if(message->flag == MESSAGE_WAITING)
     7e0:	d0a00a17 	ldw	r2,-32728(gp)
     7e4:	10800003 	ldbu	r2,0(r2)
     7e8:	10803fcc 	andi	r2,r2,255
     7ec:	10800058 	cmpnei	r2,r2,1
     7f0:	1000231e 	bne	r2,zero,880 <SharedMem_Update+0xb0>
		{
			altera_avalon_mutex_lock(mutex, cpu_id);
     7f4:	d0e00b17 	ldw	r3,-32724(gp)
     7f8:	d0a00917 	ldw	r2,-32732(gp)
     7fc:	1809883a 	mov	r4,r3
     800:	100b883a 	mov	r5,r2
     804:	0000db40 	call	db4 <altera_avalon_mutex_lock>

			RxBuff[0] = message->buf[0];
     808:	d0a00a17 	ldw	r2,-32728(gp)
     80c:	10c00043 	ldbu	r3,1(r2)
     810:	00800034 	movhi	r2,0
     814:	10846104 	addi	r2,r2,4484
     818:	10c00005 	stb	r3,0(r2)
			RxBuff[1] = message->buf[1];
     81c:	d0a00a17 	ldw	r2,-32728(gp)
     820:	10c00083 	ldbu	r3,2(r2)
     824:	00800034 	movhi	r2,0
     828:	10846104 	addi	r2,r2,4484
     82c:	10c00045 	stb	r3,1(r2)
			RxBuff[2] = message->buf[2];
     830:	d0a00a17 	ldw	r2,-32728(gp)
     834:	10c000c3 	ldbu	r3,3(r2)
     838:	00800034 	movhi	r2,0
     83c:	10846104 	addi	r2,r2,4484
     840:	10c00085 	stb	r3,2(r2)
			RxBuff[3] = message->buf[3];
     844:	d0a00a17 	ldw	r2,-32728(gp)
     848:	10c00103 	ldbu	r3,4(r2)
     84c:	00800034 	movhi	r2,0
     850:	10846104 	addi	r2,r2,4484
     854:	10c000c5 	stb	r3,3(r2)
			RxBuff[4] = message->buf[4];
     858:	d0a00a17 	ldw	r2,-32728(gp)
     85c:	10c00143 	ldbu	r3,5(r2)
     860:	00800034 	movhi	r2,0
     864:	10846104 	addi	r2,r2,4484
     868:	10c00105 	stb	r3,4(r2)
			message->flag = NO_MESSAGE;
     86c:	d0a00a17 	ldw	r2,-32728(gp)
     870:	10000005 	stb	zero,0(r2)
			// Release the Mutex
			altera_avalon_mutex_unlock(mutex);
     874:	d0a00b17 	ldw	r2,-32724(gp)
     878:	1009883a 	mov	r4,r2
     87c:	0000e340 	call	e34 <altera_avalon_mutex_unlock>
		}

		if(RxBuff[4] == 0x06)
     880:	00800034 	movhi	r2,0
     884:	10846104 	addi	r2,r2,4484
     888:	10800103 	ldbu	r2,4(r2)
     88c:	10803fcc 	andi	r2,r2,255
     890:	10800198 	cmpnei	r2,r2,6
     894:	1000051e 	bne	r2,zero,8ac <SharedMem_Update+0xdc>
		{
			// Change the LED from OFF to ON (or vice versa)
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,
     898:	00a50c14 	movui	r2,37936
     89c:	10800037 	ldwio	r2,0(r2)
     8a0:	10c0009c 	xori	r3,r2,2
     8a4:	00a50c14 	movui	r2,37936
     8a8:	10c00035 	stwio	r3,0(r2)
										IORD_ALTERA_AVALON_PIO_DATA(LED_BASE) ^ LED1_pin);
		}
   }
     8ac:	e037883a 	mov	sp,fp
     8b0:	dfc00117 	ldw	ra,4(sp)
     8b4:	df000017 	ldw	fp,0(sp)
     8b8:	dec00204 	addi	sp,sp,8
     8bc:	f800283a 	ret

000008c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
     8c0:	defff904 	addi	sp,sp,-28
     8c4:	dfc00615 	stw	ra,24(sp)
     8c8:	df000515 	stw	fp,20(sp)
     8cc:	df000504 	addi	fp,sp,20
     8d0:	e13ffc15 	stw	r4,-16(fp)
     8d4:	e17ffd15 	stw	r5,-12(fp)
     8d8:	e1bffe15 	stw	r6,-8(fp)
     8dc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
     8e0:	e0800217 	ldw	r2,8(fp)
     8e4:	d8800015 	stw	r2,0(sp)
     8e8:	e13ffc17 	ldw	r4,-16(fp)
     8ec:	e17ffd17 	ldw	r5,-12(fp)
     8f0:	e1bffe17 	ldw	r6,-8(fp)
     8f4:	e1ffff17 	ldw	r7,-4(fp)
     8f8:	0000a980 	call	a98 <alt_iic_isr_register>
}  
     8fc:	e037883a 	mov	sp,fp
     900:	dfc00117 	ldw	ra,4(sp)
     904:	df000017 	ldw	fp,0(sp)
     908:	dec00204 	addi	sp,sp,8
     90c:	f800283a 	ret

00000910 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
     910:	defff904 	addi	sp,sp,-28
     914:	df000615 	stw	fp,24(sp)
     918:	df000604 	addi	fp,sp,24
     91c:	e13ffe15 	stw	r4,-8(fp)
     920:	e17fff15 	stw	r5,-4(fp)
     924:	e0bfff17 	ldw	r2,-4(fp)
     928:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     92c:	0005303a 	rdctl	r2,status
     930:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     934:	e0fffb17 	ldw	r3,-20(fp)
     938:	00bfff84 	movi	r2,-2
     93c:	1884703a 	and	r2,r3,r2
     940:	1001703a 	wrctl	status,r2
  
  return context;
     944:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
     948:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
     94c:	e0bffa17 	ldw	r2,-24(fp)
     950:	00c00044 	movi	r3,1
     954:	1884983a 	sll	r2,r3,r2
     958:	1007883a 	mov	r3,r2
     95c:	00800034 	movhi	r2,0
     960:	10845704 	addi	r2,r2,4444
     964:	10800017 	ldw	r2,0(r2)
     968:	1886b03a 	or	r3,r3,r2
     96c:	00800034 	movhi	r2,0
     970:	10845704 	addi	r2,r2,4444
     974:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     978:	00800034 	movhi	r2,0
     97c:	10845704 	addi	r2,r2,4444
     980:	10800017 	ldw	r2,0(r2)
     984:	100170fa 	wrctl	ienable,r2
     988:	e0bffc17 	ldw	r2,-16(fp)
     98c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     990:	e0bffd17 	ldw	r2,-12(fp)
     994:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
     998:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
     99c:	e037883a 	mov	sp,fp
     9a0:	df000017 	ldw	fp,0(sp)
     9a4:	dec00104 	addi	sp,sp,4
     9a8:	f800283a 	ret

000009ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
     9ac:	defff904 	addi	sp,sp,-28
     9b0:	df000615 	stw	fp,24(sp)
     9b4:	df000604 	addi	fp,sp,24
     9b8:	e13ffe15 	stw	r4,-8(fp)
     9bc:	e17fff15 	stw	r5,-4(fp)
     9c0:	e0bfff17 	ldw	r2,-4(fp)
     9c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     9c8:	0005303a 	rdctl	r2,status
     9cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     9d0:	e0fffb17 	ldw	r3,-20(fp)
     9d4:	00bfff84 	movi	r2,-2
     9d8:	1884703a 	and	r2,r3,r2
     9dc:	1001703a 	wrctl	status,r2
  
  return context;
     9e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
     9e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
     9e8:	e0bffa17 	ldw	r2,-24(fp)
     9ec:	00c00044 	movi	r3,1
     9f0:	1884983a 	sll	r2,r3,r2
     9f4:	0084303a 	nor	r2,zero,r2
     9f8:	1007883a 	mov	r3,r2
     9fc:	00800034 	movhi	r2,0
     a00:	10845704 	addi	r2,r2,4444
     a04:	10800017 	ldw	r2,0(r2)
     a08:	1886703a 	and	r3,r3,r2
     a0c:	00800034 	movhi	r2,0
     a10:	10845704 	addi	r2,r2,4444
     a14:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     a18:	00800034 	movhi	r2,0
     a1c:	10845704 	addi	r2,r2,4444
     a20:	10800017 	ldw	r2,0(r2)
     a24:	100170fa 	wrctl	ienable,r2
     a28:	e0bffc17 	ldw	r2,-16(fp)
     a2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     a30:	e0bffd17 	ldw	r2,-12(fp)
     a34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
     a38:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
     a3c:	e037883a 	mov	sp,fp
     a40:	df000017 	ldw	fp,0(sp)
     a44:	dec00104 	addi	sp,sp,4
     a48:	f800283a 	ret

00000a4c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
     a4c:	defffc04 	addi	sp,sp,-16
     a50:	df000315 	stw	fp,12(sp)
     a54:	df000304 	addi	fp,sp,12
     a58:	e13ffe15 	stw	r4,-8(fp)
     a5c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
     a60:	000530fa 	rdctl	r2,ienable
     a64:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
     a68:	e0bfff17 	ldw	r2,-4(fp)
     a6c:	00c00044 	movi	r3,1
     a70:	1884983a 	sll	r2,r3,r2
     a74:	1007883a 	mov	r3,r2
     a78:	e0bffd17 	ldw	r2,-12(fp)
     a7c:	1884703a 	and	r2,r3,r2
     a80:	1004c03a 	cmpne	r2,r2,zero
     a84:	10803fcc 	andi	r2,r2,255
}
     a88:	e037883a 	mov	sp,fp
     a8c:	df000017 	ldw	fp,0(sp)
     a90:	dec00104 	addi	sp,sp,4
     a94:	f800283a 	ret

00000a98 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
     a98:	defff504 	addi	sp,sp,-44
     a9c:	dfc00a15 	stw	ra,40(sp)
     aa0:	df000915 	stw	fp,36(sp)
     aa4:	df000904 	addi	fp,sp,36
     aa8:	e13ffc15 	stw	r4,-16(fp)
     aac:	e17ffd15 	stw	r5,-12(fp)
     ab0:	e1bffe15 	stw	r6,-8(fp)
     ab4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
     ab8:	00bffa84 	movi	r2,-22
     abc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
     ac0:	e0bffd17 	ldw	r2,-12(fp)
     ac4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
     ac8:	e0bff817 	ldw	r2,-32(fp)
     acc:	10800808 	cmpgei	r2,r2,32
     ad0:	1000271e 	bne	r2,zero,b70 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     ad4:	0005303a 	rdctl	r2,status
     ad8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     adc:	e0fffa17 	ldw	r3,-24(fp)
     ae0:	00bfff84 	movi	r2,-2
     ae4:	1884703a 	and	r2,r3,r2
     ae8:	1001703a 	wrctl	status,r2
  
  return context;
     aec:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
     af0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
     af4:	00c00034 	movhi	r3,0
     af8:	18c46404 	addi	r3,r3,4496
     afc:	e0bff817 	ldw	r2,-32(fp)
     b00:	100490fa 	slli	r2,r2,3
     b04:	1885883a 	add	r2,r3,r2
     b08:	e0fffe17 	ldw	r3,-8(fp)
     b0c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
     b10:	00c00034 	movhi	r3,0
     b14:	18c46404 	addi	r3,r3,4496
     b18:	e0bff817 	ldw	r2,-32(fp)
     b1c:	100490fa 	slli	r2,r2,3
     b20:	1885883a 	add	r2,r3,r2
     b24:	10800104 	addi	r2,r2,4
     b28:	e0ffff17 	ldw	r3,-4(fp)
     b2c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
     b30:	e0bffe17 	ldw	r2,-8(fp)
     b34:	10000526 	beq	r2,zero,b4c <alt_iic_isr_register+0xb4>
     b38:	e0bff817 	ldw	r2,-32(fp)
     b3c:	e13ffc17 	ldw	r4,-16(fp)
     b40:	100b883a 	mov	r5,r2
     b44:	00009100 	call	910 <alt_ic_irq_enable>
     b48:	00000406 	br	b5c <alt_iic_isr_register+0xc4>
     b4c:	e0bff817 	ldw	r2,-32(fp)
     b50:	e13ffc17 	ldw	r4,-16(fp)
     b54:	100b883a 	mov	r5,r2
     b58:	00009ac0 	call	9ac <alt_ic_irq_disable>
     b5c:	e0bff715 	stw	r2,-36(fp)
     b60:	e0bff917 	ldw	r2,-28(fp)
     b64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     b68:	e0bffb17 	ldw	r2,-20(fp)
     b6c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
     b70:	e0bff717 	ldw	r2,-36(fp)
}
     b74:	e037883a 	mov	sp,fp
     b78:	dfc00117 	ldw	ra,4(sp)
     b7c:	df000017 	ldw	fp,0(sp)
     b80:	dec00204 	addi	sp,sp,8
     b84:	f800283a 	ret

00000b88 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     b88:	defffc04 	addi	sp,sp,-16
     b8c:	df000315 	stw	fp,12(sp)
     b90:	df000304 	addi	fp,sp,12
     b94:	e13ffd15 	stw	r4,-12(fp)
     b98:	e17ffe15 	stw	r5,-8(fp)
     b9c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     ba0:	e0fffe17 	ldw	r3,-8(fp)
     ba4:	e0bffd17 	ldw	r2,-12(fp)
     ba8:	18800e26 	beq	r3,r2,be4 <alt_load_section+0x5c>
  {
    while( to != end )
     bac:	00000a06 	br	bd8 <alt_load_section+0x50>
    {
      *to++ = *from++;
     bb0:	e0bffd17 	ldw	r2,-12(fp)
     bb4:	10c00017 	ldw	r3,0(r2)
     bb8:	e0bffe17 	ldw	r2,-8(fp)
     bbc:	10c00015 	stw	r3,0(r2)
     bc0:	e0bffe17 	ldw	r2,-8(fp)
     bc4:	10800104 	addi	r2,r2,4
     bc8:	e0bffe15 	stw	r2,-8(fp)
     bcc:	e0bffd17 	ldw	r2,-12(fp)
     bd0:	10800104 	addi	r2,r2,4
     bd4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     bd8:	e0fffe17 	ldw	r3,-8(fp)
     bdc:	e0bfff17 	ldw	r2,-4(fp)
     be0:	18bff31e 	bne	r3,r2,bb0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
     be4:	e037883a 	mov	sp,fp
     be8:	df000017 	ldw	fp,0(sp)
     bec:	dec00104 	addi	sp,sp,4
     bf0:	f800283a 	ret

00000bf4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     bf4:	defffe04 	addi	sp,sp,-8
     bf8:	dfc00115 	stw	ra,4(sp)
     bfc:	df000015 	stw	fp,0(sp)
     c00:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     c04:	01000034 	movhi	r4,0
     c08:	21044f04 	addi	r4,r4,4412
     c0c:	01400034 	movhi	r5,0
     c10:	29444b04 	addi	r5,r5,4396
     c14:	01800034 	movhi	r6,0
     c18:	31844f04 	addi	r6,r6,4412
     c1c:	0000b880 	call	b88 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     c20:	01000034 	movhi	r4,0
     c24:	21000804 	addi	r4,r4,32
     c28:	01400034 	movhi	r5,0
     c2c:	29400804 	addi	r5,r5,32
     c30:	01800034 	movhi	r6,0
     c34:	31806e04 	addi	r6,r6,440
     c38:	0000b880 	call	b88 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     c3c:	01000034 	movhi	r4,0
     c40:	21044604 	addi	r4,r4,4376
     c44:	01400034 	movhi	r5,0
     c48:	29444604 	addi	r5,r5,4376
     c4c:	01800034 	movhi	r6,0
     c50:	31844b04 	addi	r6,r6,4396
     c54:	0000b880 	call	b88 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     c58:	0000f480 	call	f48 <alt_dcache_flush_all>
  alt_icache_flush_all();
     c5c:	0000ff40 	call	ff4 <alt_icache_flush_all>
}
     c60:	e037883a 	mov	sp,fp
     c64:	dfc00117 	ldw	ra,4(sp)
     c68:	df000017 	ldw	fp,0(sp)
     c6c:	dec00204 	addi	sp,sp,8
     c70:	f800283a 	ret

00000c74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
     c74:	defffe04 	addi	sp,sp,-8
     c78:	dfc00115 	stw	ra,4(sp)
     c7c:	df000015 	stw	fp,0(sp)
     c80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
     c84:	00800034 	movhi	r2,0
     c88:	10844e04 	addi	r2,r2,4408
     c8c:	10800017 	ldw	r2,0(r2)
     c90:	10000526 	beq	r2,zero,ca8 <alt_get_errno+0x34>
     c94:	00800034 	movhi	r2,0
     c98:	10844e04 	addi	r2,r2,4408
     c9c:	10800017 	ldw	r2,0(r2)
     ca0:	103ee83a 	callr	r2
     ca4:	00000206 	br	cb0 <alt_get_errno+0x3c>
     ca8:	00800034 	movhi	r2,0
     cac:	10845804 	addi	r2,r2,4448
}
     cb0:	e037883a 	mov	sp,fp
     cb4:	dfc00117 	ldw	ra,4(sp)
     cb8:	df000017 	ldw	fp,0(sp)
     cbc:	dec00204 	addi	sp,sp,8
     cc0:	f800283a 	ret

00000cc4 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
     cc4:	defff904 	addi	sp,sp,-28
     cc8:	df000615 	stw	fp,24(sp)
     ccc:	df000604 	addi	fp,sp,24
     cd0:	e13ffe15 	stw	r4,-8(fp)
     cd4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
     cd8:	00bfffc4 	movi	r2,-1
     cdc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
     ce0:	0005317a 	rdctl	r2,cpuid
     ce4:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
     ce8:	e0bffb17 	ldw	r2,-20(fp)
     cec:	1006943a 	slli	r3,r2,16
     cf0:	e0bfff17 	ldw	r2,-4(fp)
     cf4:	1884b03a 	or	r2,r3,r2
     cf8:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
     cfc:	e0bffe17 	ldw	r2,-8(fp)
     d00:	10800317 	ldw	r2,12(r2)
     d04:	e0fffc17 	ldw	r3,-16(fp)
     d08:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
     d0c:	e0bffe17 	ldw	r2,-8(fp)
     d10:	10800317 	ldw	r2,12(r2)
     d14:	10800037 	ldwio	r2,0(r2)
     d18:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
     d1c:	e0fffd17 	ldw	r3,-12(fp)
     d20:	e0bffc17 	ldw	r2,-16(fp)
     d24:	1880011e 	bne	r3,r2,d2c <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
     d28:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
     d2c:	e0bffa17 	ldw	r2,-24(fp)
}
     d30:	e037883a 	mov	sp,fp
     d34:	df000017 	ldw	fp,0(sp)
     d38:	dec00104 	addi	sp,sp,4
     d3c:	f800283a 	ret

00000d40 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
     d40:	defffc04 	addi	sp,sp,-16
     d44:	dfc00315 	stw	ra,12(sp)
     d48:	df000215 	stw	fp,8(sp)
     d4c:	df000204 	addi	fp,sp,8
     d50:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
     d54:	e13fff17 	ldw	r4,-4(fp)
     d58:	d1600104 	addi	r5,gp,-32764
     d5c:	0000f640 	call	f64 <alt_find_dev>
     d60:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
     d64:	e0bffe17 	ldw	r2,-8(fp)
     d68:	1000031e 	bne	r2,zero,d78 <altera_avalon_mutex_open+0x38>
  {
    ALT_ERRNO = ENODEV;
     d6c:	0000c740 	call	c74 <alt_get_errno>
     d70:	00c004c4 	movi	r3,19
     d74:	10c00015 	stw	r3,0(r2)
  }

  return dev;
     d78:	e0bffe17 	ldw	r2,-8(fp)
}
     d7c:	e037883a 	mov	sp,fp
     d80:	dfc00117 	ldw	ra,4(sp)
     d84:	df000017 	ldw	fp,0(sp)
     d88:	dec00204 	addi	sp,sp,8
     d8c:	f800283a 	ret

00000d90 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
     d90:	defffe04 	addi	sp,sp,-8
     d94:	df000115 	stw	fp,4(sp)
     d98:	df000104 	addi	fp,sp,4
     d9c:	e13fff15 	stw	r4,-4(fp)
  return;
     da0:	0001883a 	nop
}
     da4:	e037883a 	mov	sp,fp
     da8:	df000017 	ldw	fp,0(sp)
     dac:	dec00104 	addi	sp,sp,4
     db0:	f800283a 	ret

00000db4 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
     db4:	defffc04 	addi	sp,sp,-16
     db8:	dfc00315 	stw	ra,12(sp)
     dbc:	df000215 	stw	fp,8(sp)
     dc0:	df000204 	addi	fp,sp,8
     dc4:	e13ffe15 	stw	r4,-8(fp)
     dc8:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
     dcc:	0001883a 	nop
     dd0:	e13ffe17 	ldw	r4,-8(fp)
     dd4:	e17fff17 	ldw	r5,-4(fp)
     dd8:	0000cc40 	call	cc4 <alt_mutex_trylock>
     ddc:	103ffc1e 	bne	r2,zero,dd0 <altera_avalon_mutex_lock+0x1c>
}
     de0:	e037883a 	mov	sp,fp
     de4:	dfc00117 	ldw	ra,4(sp)
     de8:	df000017 	ldw	fp,0(sp)
     dec:	dec00204 	addi	sp,sp,8
     df0:	f800283a 	ret

00000df4 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
     df4:	defffb04 	addi	sp,sp,-20
     df8:	dfc00415 	stw	ra,16(sp)
     dfc:	df000315 	stw	fp,12(sp)
     e00:	df000304 	addi	fp,sp,12
     e04:	e13ffe15 	stw	r4,-8(fp)
     e08:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
     e0c:	e13ffe17 	ldw	r4,-8(fp)
     e10:	e17fff17 	ldw	r5,-4(fp)
     e14:	0000cc40 	call	cc4 <alt_mutex_trylock>
     e18:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
     e1c:	e0bffd17 	ldw	r2,-12(fp)
}
     e20:	e037883a 	mov	sp,fp
     e24:	dfc00117 	ldw	ra,4(sp)
     e28:	df000017 	ldw	fp,0(sp)
     e2c:	dec00204 	addi	sp,sp,8
     e30:	f800283a 	ret

00000e34 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
     e34:	defffd04 	addi	sp,sp,-12
     e38:	df000215 	stw	fp,8(sp)
     e3c:	df000204 	addi	fp,sp,8
     e40:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
     e44:	0005317a 	rdctl	r2,cpuid
     e48:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
     e4c:	e0bfff17 	ldw	r2,-4(fp)
     e50:	10800317 	ldw	r2,12(r2)
     e54:	10800104 	addi	r2,r2,4
     e58:	00c00044 	movi	r3,1
     e5c:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
     e60:	e0bfff17 	ldw	r2,-4(fp)
     e64:	10800317 	ldw	r2,12(r2)
     e68:	e0fffe17 	ldw	r3,-8(fp)
     e6c:	1806943a 	slli	r3,r3,16
     e70:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
     e74:	e037883a 	mov	sp,fp
     e78:	df000017 	ldw	fp,0(sp)
     e7c:	dec00104 	addi	sp,sp,4
     e80:	f800283a 	ret

00000e84 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
     e84:	defff904 	addi	sp,sp,-28
     e88:	df000615 	stw	fp,24(sp)
     e8c:	df000604 	addi	fp,sp,24
     e90:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
     e94:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
     e98:	0005317a 	rdctl	r2,cpuid
     e9c:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
     ea0:	e0bfff17 	ldw	r2,-4(fp)
     ea4:	10800317 	ldw	r2,12(r2)
     ea8:	10800037 	ldwio	r2,0(r2)
     eac:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
     eb0:	e0bffc17 	ldw	r2,-16(fp)
     eb4:	1004d43a 	srli	r2,r2,16
     eb8:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
     ebc:	e0fffd17 	ldw	r3,-12(fp)
     ec0:	e0bffb17 	ldw	r2,-20(fp)
     ec4:	1880071e 	bne	r3,r2,ee4 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
     ec8:	e0bffc17 	ldw	r2,-16(fp)
     ecc:	10bfffcc 	andi	r2,r2,65535
     ed0:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
     ed4:	e0bffe17 	ldw	r2,-8(fp)
     ed8:	10000226 	beq	r2,zero,ee4 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
     edc:	00800044 	movi	r2,1
     ee0:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
     ee4:	e0bffa17 	ldw	r2,-24(fp)
}
     ee8:	e037883a 	mov	sp,fp
     eec:	df000017 	ldw	fp,0(sp)
     ef0:	dec00104 	addi	sp,sp,4
     ef4:	f800283a 	ret

00000ef8 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
     ef8:	defffc04 	addi	sp,sp,-16
     efc:	df000315 	stw	fp,12(sp)
     f00:	df000304 	addi	fp,sp,12
     f04:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
     f08:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
     f0c:	e0bfff17 	ldw	r2,-4(fp)
     f10:	10800317 	ldw	r2,12(r2)
     f14:	10800104 	addi	r2,r2,4
     f18:	10800037 	ldwio	r2,0(r2)
     f1c:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
     f20:	e0bffe17 	ldw	r2,-8(fp)
     f24:	1080004c 	andi	r2,r2,1
     f28:	10000226 	beq	r2,zero,f34 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
     f2c:	00800044 	movi	r2,1
     f30:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
     f34:	e0bffd17 	ldw	r2,-12(fp)
}
     f38:	e037883a 	mov	sp,fp
     f3c:	df000017 	ldw	fp,0(sp)
     f40:	dec00104 	addi	sp,sp,4
     f44:	f800283a 	ret

00000f48 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
     f48:	deffff04 	addi	sp,sp,-4
     f4c:	df000015 	stw	fp,0(sp)
     f50:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
     f54:	e037883a 	mov	sp,fp
     f58:	df000017 	ldw	fp,0(sp)
     f5c:	dec00104 	addi	sp,sp,4
     f60:	f800283a 	ret

00000f64 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
     f64:	defffa04 	addi	sp,sp,-24
     f68:	dfc00515 	stw	ra,20(sp)
     f6c:	df000415 	stw	fp,16(sp)
     f70:	df000404 	addi	fp,sp,16
     f74:	e13ffe15 	stw	r4,-8(fp)
     f78:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
     f7c:	e0bfff17 	ldw	r2,-4(fp)
     f80:	10800017 	ldw	r2,0(r2)
     f84:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
     f88:	e13ffe17 	ldw	r4,-8(fp)
     f8c:	000108c0 	call	108c <strlen>
     f90:	10800044 	addi	r2,r2,1
     f94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
     f98:	00000d06 	br	fd0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
     f9c:	e0bffc17 	ldw	r2,-16(fp)
     fa0:	10c00217 	ldw	r3,8(r2)
     fa4:	e0bffd17 	ldw	r2,-12(fp)
     fa8:	1809883a 	mov	r4,r3
     fac:	e17ffe17 	ldw	r5,-8(fp)
     fb0:	100d883a 	mov	r6,r2
     fb4:	00010100 	call	1010 <memcmp>
     fb8:	1000021e 	bne	r2,zero,fc4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
     fbc:	e0bffc17 	ldw	r2,-16(fp)
     fc0:	00000706 	br	fe0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
     fc4:	e0bffc17 	ldw	r2,-16(fp)
     fc8:	10800017 	ldw	r2,0(r2)
     fcc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
     fd0:	e0fffc17 	ldw	r3,-16(fp)
     fd4:	e0bfff17 	ldw	r2,-4(fp)
     fd8:	18bff01e 	bne	r3,r2,f9c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
     fdc:	0005883a 	mov	r2,zero
}
     fe0:	e037883a 	mov	sp,fp
     fe4:	dfc00117 	ldw	ra,4(sp)
     fe8:	df000017 	ldw	fp,0(sp)
     fec:	dec00204 	addi	sp,sp,8
     ff0:	f800283a 	ret

00000ff4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
     ff4:	deffff04 	addi	sp,sp,-4
     ff8:	df000015 	stw	fp,0(sp)
     ffc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    1000:	e037883a 	mov	sp,fp
    1004:	df000017 	ldw	fp,0(sp)
    1008:	dec00104 	addi	sp,sp,4
    100c:	f800283a 	ret

00001010 <memcmp>:
    1010:	01c000c4 	movi	r7,3
    1014:	3980192e 	bgeu	r7,r6,107c <memcmp+0x6c>
    1018:	2904b03a 	or	r2,r5,r4
    101c:	11c4703a 	and	r2,r2,r7
    1020:	10000f26 	beq	r2,zero,1060 <memcmp+0x50>
    1024:	20c00003 	ldbu	r3,0(r4)
    1028:	28800003 	ldbu	r2,0(r5)
    102c:	1880151e 	bne	r3,r2,1084 <memcmp+0x74>
    1030:	31bfff84 	addi	r6,r6,-2
    1034:	01ffffc4 	movi	r7,-1
    1038:	00000406 	br	104c <memcmp+0x3c>
    103c:	20c00003 	ldbu	r3,0(r4)
    1040:	28800003 	ldbu	r2,0(r5)
    1044:	31bfffc4 	addi	r6,r6,-1
    1048:	18800e1e 	bne	r3,r2,1084 <memcmp+0x74>
    104c:	21000044 	addi	r4,r4,1
    1050:	29400044 	addi	r5,r5,1
    1054:	31fff91e 	bne	r6,r7,103c <memcmp+0x2c>
    1058:	0005883a 	mov	r2,zero
    105c:	f800283a 	ret
    1060:	20c00017 	ldw	r3,0(r4)
    1064:	28800017 	ldw	r2,0(r5)
    1068:	1880041e 	bne	r3,r2,107c <memcmp+0x6c>
    106c:	31bfff04 	addi	r6,r6,-4
    1070:	21000104 	addi	r4,r4,4
    1074:	29400104 	addi	r5,r5,4
    1078:	39bff936 	bltu	r7,r6,1060 <memcmp+0x50>
    107c:	303fe91e 	bne	r6,zero,1024 <memcmp+0x14>
    1080:	003ff506 	br	1058 <memcmp+0x48>
    1084:	1885c83a 	sub	r2,r3,r2
    1088:	f800283a 	ret

0000108c <strlen>:
    108c:	208000cc 	andi	r2,r4,3
    1090:	10001f1e 	bne	r2,zero,1110 <strlen+0x84>
    1094:	20800017 	ldw	r2,0(r4)
    1098:	01ffbff4 	movhi	r7,65279
    109c:	39ffbfc4 	addi	r7,r7,-257
    10a0:	01a02074 	movhi	r6,32897
    10a4:	31a02004 	addi	r6,r6,-32640
    10a8:	11c7883a 	add	r3,r2,r7
    10ac:	0084303a 	nor	r2,zero,r2
    10b0:	1886703a 	and	r3,r3,r2
    10b4:	1986703a 	and	r3,r3,r6
    10b8:	2005883a 	mov	r2,r4
    10bc:	1800101e 	bne	r3,zero,1100 <strlen+0x74>
    10c0:	10800104 	addi	r2,r2,4
    10c4:	10c00017 	ldw	r3,0(r2)
    10c8:	19cb883a 	add	r5,r3,r7
    10cc:	00c6303a 	nor	r3,zero,r3
    10d0:	28c6703a 	and	r3,r5,r3
    10d4:	1986703a 	and	r3,r3,r6
    10d8:	1800091e 	bne	r3,zero,1100 <strlen+0x74>
    10dc:	10800104 	addi	r2,r2,4
    10e0:	10c00017 	ldw	r3,0(r2)
    10e4:	19cb883a 	add	r5,r3,r7
    10e8:	00c6303a 	nor	r3,zero,r3
    10ec:	28c6703a 	and	r3,r5,r3
    10f0:	1986703a 	and	r3,r3,r6
    10f4:	183ff226 	beq	r3,zero,10c0 <strlen+0x34>
    10f8:	00000106 	br	1100 <strlen+0x74>
    10fc:	10800044 	addi	r2,r2,1
    1100:	10c00007 	ldb	r3,0(r2)
    1104:	183ffd1e 	bne	r3,zero,10fc <strlen+0x70>
    1108:	1105c83a 	sub	r2,r2,r4
    110c:	f800283a 	ret
    1110:	2005883a 	mov	r2,r4
    1114:	003ffa06 	br	1100 <strlen+0x74>
