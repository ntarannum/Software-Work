
app_slave.elf:     file format elf32-littlenios2
app_slave.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000015f8 memsz 0x000015f8 flags r-x
    LOAD off    0x00002618 vaddr 0x00001618 paddr 0x0000161c align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00002620 vaddr 0x00001620 paddr 0x00001620 align 2**12
         filesz 0x00000000 memsz 0x000001b8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001460  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rwdata       00000004  00001618  0000161c  00002618  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          000001b8  00001620  00001620  00002620  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  0000261c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000268  00000000  00000000  00002640  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001614  00000000  00000000  000028a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ac0  00000000  00000000  00003ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b75  00000000  00000000  0000497c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004ec  00000000  00000000  000054f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008ae  00000000  00000000  000059e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000065c  00000000  00000000  0000628e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000010  00000000  00000000  000068ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000b8  00000000  00000000  00006900  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  00007c80  2**0
                  CONTENTS, READONLY
 16 .cpu          0000000c  00000000  00000000  00007c83  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  00007c8f  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00007c90  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   0000000b  00000000  00000000  00007c91  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    0000000b  00000000  00000000  00007c9c  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   0000000b  00000000  00000000  00007ca7  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 0000000b  00000000  00000000  00007cb2  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 0000000f  00000000  00000000  00007cbd  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     00050f18  00000000  00000000  00007ccc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
00001618 l    d  .rwdata	00000000 .rwdata
00001620 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../app_slave_bsp//obj/HAL/src/crt0.o
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 spi_mcp2515.c
00000000 l    df *ABS*	00000000 2_50_XXg.c
00000930 l     F .text	0000018c SCH_Update
00000000 l    df *ABS*	00000000 Main.c
00000000 l    df *ABS*	00000000 Sch51.c
00000ea4 l     F .text	0000001c SCH_Go_To_Sleep
00000000 l    df *ABS*	00000000 HEARTBEAT.c
00000000 l    df *ABS*	00000000 LED_ONOFF.c
00000000 l    df *ABS*	00000000 PushButton.c
00001634 l     O .bss	00000001 pb0_input
00001638 l     O .bss	00000004 Duration.1456
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
000012ec l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 
00000b68 g     F .text	00000068 alt_main
000016d8 g     O .bss	00000100 alt_irq
0000161c g       *ABS*	00000000 __flash_rwdata_start
00000b14 g     F .text	00000054 SCC_A_SLAVE_Send_Ack_Message_To_Master
000007d8 g     F .text	00000088 SCH_Init_T0
0000162c g     O .bss	00000001 Error_code_G
00001624 g     O .bss	00000001 Tick_message_data_G
00000f9c g     F .text	00000088 PushButton_Update
00000000 g     F .entry	0000000c __reset
00001628 g     O .bss	00000004 edge_capture
00000020 g       *ABS*	00000000 __flash_exceptions_start
000016a8 g     O .bss	00000030 SCH_tasks_G
00009618 g       *ABS*	00000000 _gp
00000f28 g     F .text	00000058 LED_ONOFF_Update
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000004f0 g     F .text	00000080 MCP2515_SetMode
00000860 g     F .text	000000d0 SCH_Start
00001630 g     O .bss	00000004 Sw_pressed_G
000017d8 g       *ABS*	00000000 __bss_end
000011fc g     F .text	000000f0 alt_iic_isr_register
000011b0 g     F .text	0000004c alt_ic_irq_enabled
00000ec0 g     F .text	0000001c HEARTBEAT_Init
00001640 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000cc alt_irq_handler
000015e0 g     F .text	0000001c alt_dcache_flush_all
0000161c g       *ABS*	00000000 __ram_rwdata_end
000001f4 g     F .text	00000208 MCP2515_Init
00001618 g       *ABS*	00000000 __ram_rodata_end
00000e88 g     F .text	0000001c SCH_Report_Status
00000770 g     F .text	00000068 MCP2515_RTS_TXB_Instruction_CMD
000017d8 g       *ABS*	00000000 end
00000468 g     F .text	00000088 MCP2515_changeBits
00003fdc g       *ABS*	00000000 __alt_stack_pointer
000006e0 g     F .text	00000090 MCP2515_Write_Register
00001644 g     O .bss	00000032 write_data
000001b8 g     F .text	0000003c _start
000013d8 g     F .text	00000208 alt_avalon_spi_command
00001620 g     O .bss	00000004 context
00001618 g       *ABS*	00000000 __ram_rwdata_start
00001618 g       *ABS*	00000000 __ram_rodata_start
00001676 g     O .bss	00000032 read_data
000017d8 g       *ABS*	00000000 __alt_stack_base
00000bd0 g     F .text	000000f4 SCH_Dispatch_Tasks
00001620 g       *ABS*	00000000 __bss_start
00000000         *UND*	00000000 main
00001618 g       *ABS*	00000000 __flash_rodata_start
00000edc g     F .text	00000030 HEARTBEAT_Update
000005d0 g     F .text	00000090 MCP2515_Read_Register
00000f0c g     F .text	0000001c LED_ONOFF_Init
00000020 g       .exceptions	00000000 alt_irq_entry
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001024 g     F .text	00000050 alt_ic_isr_register
0000161c g       *ABS*	00000000 _edata
00000dc0 g     F .text	000000c8 SCH_Delete_Task
000017d8 g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
00000570 g     F .text	00000060 MCP2515_Reset
00000660 g     F .text	00000080 MCP2515_Read_Rx_Buffer_Register
00001110 g     F .text	000000a0 alt_ic_irq_disable
00000cc4 g     F .text	000000fc SCH_Add_Task
00003fdc g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000f80 g     F .text	0000001c PushButton_Init
000015fc g     F .text	0000001c alt_icache_flush_all
00001618 g     O .rwdata	00000004 alt_priority_mask
00001074 g     F .text	0000009c alt_ic_irq_enable
0000163c g     O .bss	00000001 Ack_message_data_G
000003fc g     F .text	0000006c MCP2515_SetBitTiming
00000abc g     F .text	00000058 SCC_A_SLAVE_Process_Tick_Message
00001358 g     F .text	00000080 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406e14 	ori	at,at,440
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001726 	beq	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00c00034 	movhi	r3,0
 130:	18c5b604 	addi	r3,r3,5848
 134:	e0bffd17 	ldw	r2,-12(fp)
 138:	100490fa 	slli	r2,r2,3
 13c:	1885883a 	add	r2,r3,r2
 140:	10c00017 	ldw	r3,0(r2)
 144:	01000034 	movhi	r4,0
 148:	2105b604 	addi	r4,r4,5848
 14c:	e0bffd17 	ldw	r2,-12(fp)
 150:	100490fa 	slli	r2,r2,3
 154:	2085883a 	add	r2,r4,r2
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	103fe31e 	bne	r2,zero,110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffc17 	ldw	r2,-16(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fde06 	br	11c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	decff714 	ori	sp,sp,16348
    movhi gp, %hi(_gp)
     1c0:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1c4:	d6a58614 	ori	gp,gp,38424
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1cc:	10858814 	ori	r2,r2,5664

    movhi r3, %hi(__bss_end)
     1d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d4:	18c5f614 	ori	r3,r3,6104

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	00013580 	call	1358 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	0000b680 	call	b68 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <MCP2515_Init>:
/*-------------MCP2515_Init---------------------------
 * This function performs reset, setup receive buffer mask and
 * configure the filters for MCP2515.
 * --------------------------------------------------------*/
void MCP2515_Init(void)
{
     1f4:	defffe04 	addi	sp,sp,-8
     1f8:	dfc00115 	stw	ra,4(sp)
     1fc:	df000015 	stw	fp,0(sp)
     200:	d839883a 	mov	fp,sp

	/* Snd reset instruction */
	MCP2515_Reset();
     204:	00005700 	call	570 <MCP2515_Reset>

	 //Set Configuration Mode
	MCP2515_SetMode(_CANSPI_MODE_CONFIG);
     208:	01002004 	movi	r4,128
     20c:	00004f00 	call	4f0 <MCP2515_SetMode>

	 //set bit timing, masks, and rollover mode
	MCP2515_SetBitTiming(0x01,0xB5,0x01);
     210:	01000044 	movi	r4,1
     214:	01402d44 	movi	r5,181
     218:	01800044 	movi	r6,1
     21c:	00003fc0 	call	3fc <MCP2515_SetBitTiming>
	// We *don't* use Buffer 0 here.
	// We therefore set it to receive CAN messages, as follows:
	// - with Standard IDs.
	// - matching the filter settings.
	// [As all our messages have Extended IDs, this won't happen...]
	MCP2515_Write_Register(RXB0CTRL, 0x20);  //0x02);
     220:	01001804 	movi	r4,96
     224:	01400804 	movi	r5,32
     228:	00006e00 	call	6e0 <MCP2515_Write_Register>

	// --- Now set up masks and filters (BEGIN) ---
	// Buffer 0 mask
	// (all 1s - so filter must match every bit)
	// [Standard IDs]
	MCP2515_Write_Register(RXM0SIDH, 0xFF);
     22c:	01000804 	movi	r4,32
     230:	01403fc4 	movi	r5,255
     234:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(RXM0SIDL, 0xE0);
     238:	01000844 	movi	r4,33
     23c:	01403804 	movi	r5,224
     240:	00006e00 	call	6e0 <MCP2515_Write_Register>

	// Buffer 0 filters
	// (all 1s, and Standard messages only)
	MCP2515_Write_Register(RXF0SIDH, 0xFF);
     244:	0009883a 	mov	r4,zero
     248:	01403fc4 	movi	r5,255
     24c:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(RXF0SIDL, 0xE0);
     250:	01000044 	movi	r4,1
     254:	01403804 	movi	r5,224
     258:	00006e00 	call	6e0 <MCP2515_Write_Register>

	MCP2515_Write_Register(RXF1SIDH, 0xFF);
     25c:	01000104 	movi	r4,4
     260:	01403fc4 	movi	r5,255
     264:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(RXF1SIDL, 0xE0);
     268:	01000144 	movi	r4,5
     26c:	01403804 	movi	r5,224
     270:	00006e00 	call	6e0 <MCP2515_Write_Register>

	// We set up MCP2510 Buffer 1 to receive Tick messages, as follows:
	// - with Extended IDs.
	// - matching the filter settings (see below)
	MCP2515_Write_Register(RXB1CTRL, 0x40);  //0x04);
     274:	01001c04 	movi	r4,112
     278:	01401004 	movi	r5,64
     27c:	00006e00 	call	6e0 <MCP2515_Write_Register>

	// Buffer 1 mask
	// (all 1s - so filter must match every bit)
	// [Extended IDs]
	MCP2515_Write_Register(RXM1SIDH, 0xFF);
     280:	01000904 	movi	r4,36
     284:	01403fc4 	movi	r5,255
     288:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(RXM1SIDL, 0xE3);
     28c:	01000944 	movi	r4,37
     290:	014038c4 	movi	r5,227
     294:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(RXM1EID8, 0xFF);
     298:	01000984 	movi	r4,38
     29c:	01403fc4 	movi	r5,255
     2a0:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(RXM1EID0, 0xFF);
     2a4:	010009c4 	movi	r4,39
     2a8:	01403fc4 	movi	r5,255
     2ac:	00006e00 	call	6e0 <MCP2515_Write_Register>

	// Buffer 1 filters
	// (only accept messages with Extended ID 0x00000000)
	// We set *ALL* relevant filters (2 - 5) to match this message
	MCP2515_Write_Register(RXF2SIDH, 0x00);
     2b0:	01000204 	movi	r4,8
     2b4:	000b883a 	mov	r5,zero
     2b8:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(RXF2SIDL, 0x08);  // EXIDE bit
     2bc:	01000244 	movi	r4,9
     2c0:	01400204 	movi	r5,8
     2c4:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(RXF2EID8, 0x00);
     2c8:	01000284 	movi	r4,10
     2cc:	000b883a 	mov	r5,zero
     2d0:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(RXF2EID0, 0x00);
     2d4:	010002c4 	movi	r4,11
     2d8:	000b883a 	mov	r5,zero
     2dc:	00006e00 	call	6e0 <MCP2515_Write_Register>

	MCP2515_Write_Register(RXF3SIDH, 0x00);
     2e0:	01000404 	movi	r4,16
     2e4:	000b883a 	mov	r5,zero
     2e8:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(RXF3SIDL, 0x08);  // EXIDE bit
     2ec:	01000444 	movi	r4,17
     2f0:	01400204 	movi	r5,8
     2f4:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(RXF3EID8, 0x00);
     2f8:	01000484 	movi	r4,18
     2fc:	000b883a 	mov	r5,zero
     300:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(RXF3EID0, 0x00);
     304:	010004c4 	movi	r4,19
     308:	000b883a 	mov	r5,zero
     30c:	00006e00 	call	6e0 <MCP2515_Write_Register>

	MCP2515_Write_Register(RXF4SIDH, 0x00);
     310:	01000504 	movi	r4,20
     314:	000b883a 	mov	r5,zero
     318:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(RXF4SIDL, 0x08);  // EXIDE bit
     31c:	01000544 	movi	r4,21
     320:	01400204 	movi	r5,8
     324:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(RXF4EID8, 0x00);
     328:	01000584 	movi	r4,22
     32c:	000b883a 	mov	r5,zero
     330:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(RXF4EID0, 0x00);
     334:	010005c4 	movi	r4,23
     338:	000b883a 	mov	r5,zero
     33c:	00006e00 	call	6e0 <MCP2515_Write_Register>

	MCP2515_Write_Register(RXF5SIDH, 0x00);
     340:	01000604 	movi	r4,24
     344:	000b883a 	mov	r5,zero
     348:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(RXF5SIDL, 0x08);  // EXIDE bit
     34c:	01000644 	movi	r4,25
     350:	01400204 	movi	r5,8
     354:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(RXF5EID8, 0x00);
     358:	01000684 	movi	r4,26
     35c:	000b883a 	mov	r5,zero
     360:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(RXF5EID0, 0x00);
     364:	010006c4 	movi	r4,27
     368:	000b883a 	mov	r5,zero
     36c:	00006e00 	call	6e0 <MCP2515_Write_Register>



	// Interrupts are required if data are in Buffer 1.
	// Clear *all* interrupt flags before enabling interrupt
	MCP2515_Write_Register(CANINTF, 0x00);
     370:	01000b04 	movi	r4,44
     374:	000b883a 	mov	r5,zero
     378:	00006e00 	call	6e0 <MCP2515_Write_Register>

	// Enable MCP2510 interrupt generation
	// (*Rx only here - no errors, etc *)
	// Interrupts from Buffer 1 only
	MCP2515_Write_Register(CANINTE, 0x02);
     37c:	01000ac4 	movi	r4,43
     380:	01400084 	movi	r5,2
     384:	00006e00 	call	6e0 <MCP2515_Write_Register>

	// Prepare 'Ack' message...
	// EXTENDED IDs used here
	// (ID 0x000000FF used for Ack messages - matches PTTES)
	MCP2515_Write_Register(TXB0SIDH, 0x00);
     388:	01000c44 	movi	r4,49
     38c:	000b883a 	mov	r5,zero
     390:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(TXB0SIDL, 0x08); // EXIDE bit
     394:	01000c84 	movi	r4,50
     398:	01400204 	movi	r5,8
     39c:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(TXB0EID8, 0x00);
     3a0:	01000cc4 	movi	r4,51
     3a4:	000b883a 	mov	r5,zero
     3a8:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(TXB0EID0, 0xFF);
     3ac:	01000d04 	movi	r4,52
     3b0:	01403fc4 	movi	r5,255
     3b4:	00006e00 	call	6e0 <MCP2515_Write_Register>

	// Set Normal Mode
	MCP2515_Write_Register(CANCTRL, _CANSPI_MODE_NORMAL);
     3b8:	010003c4 	movi	r4,15
     3bc:	000b883a 	mov	r5,zero
     3c0:	00006e00 	call	6e0 <MCP2515_Write_Register>

	// Number of data bytes
	// NOTE: First byte is the slave ID
	MCP2515_Write_Register(TXB0DLC, 0x02);
     3c4:	01000d44 	movi	r4,53
     3c8:	01400084 	movi	r5,2
     3cc:	00006e00 	call	6e0 <MCP2515_Write_Register>

	// Initial values of the data bytes
	// [Generally only need to change data values and send message]
	MCP2515_Write_Register(TXBnDm(0,0), 0x01);  // Slave ID
     3d0:	01000d84 	movi	r4,54
     3d4:	01400044 	movi	r5,1
     3d8:	00006e00 	call	6e0 <MCP2515_Write_Register>

	MCP2515_Write_Register(TXBnDm(0,1), 0x02);  // Data byte 0, etc...
     3dc:	01000dc4 	movi	r4,55
     3e0:	01400084 	movi	r5,2
     3e4:	00006e00 	call	6e0 <MCP2515_Write_Register>

}
     3e8:	e037883a 	mov	sp,fp
     3ec:	dfc00117 	ldw	ra,4(sp)
     3f0:	df000017 	ldw	fp,0(sp)
     3f4:	dec00204 	addi	sp,sp,8
     3f8:	f800283a 	ret

000003fc <MCP2515_SetBitTiming>:
 * Input = rCNF1, mask for configuration register 1
 * Input = rCNF2, mask for configuration register 2
 * Inout = rCNF3, mask for configuration register 3
 * --------------------------------------------------------*/
unsigned char MCP2515_SetBitTiming(unsigned char rCNF1, unsigned char rCNF2, unsigned char rCNF3)
{
     3fc:	defffb04 	addi	sp,sp,-20
     400:	dfc00415 	stw	ra,16(sp)
     404:	df000315 	stw	fp,12(sp)
     408:	df000304 	addi	fp,sp,12
     40c:	2807883a 	mov	r3,r5
     410:	3005883a 	mov	r2,r6
     414:	e13ffd05 	stb	r4,-12(fp)
     418:	e0fffe05 	stb	r3,-8(fp)
     41c:	e0bfff05 	stb	r2,-4(fp)
	//https://www.kvaser.com/support/calculators/bit-timing-calculator/
	// Configure to 250kbps (in case of 16 MHz CAN controller clock).
	MCP2515_Write_Register(CNF1, rCNF1);
     420:	e0bffd03 	ldbu	r2,-12(fp)
     424:	01000a84 	movi	r4,42
     428:	100b883a 	mov	r5,r2
     42c:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(CNF2, rCNF2);
     430:	e0bffe03 	ldbu	r2,-8(fp)
     434:	01000a44 	movi	r4,41
     438:	100b883a 	mov	r5,r2
     43c:	00006e00 	call	6e0 <MCP2515_Write_Register>
	MCP2515_Write_Register(CNF3, rCNF3);
     440:	e0bfff03 	ldbu	r2,-4(fp)
     444:	01000a04 	movi	r4,40
     448:	100b883a 	mov	r5,r2
     44c:	00006e00 	call	6e0 <MCP2515_Write_Register>
	return 0;
     450:	0005883a 	mov	r2,zero
}
     454:	e037883a 	mov	sp,fp
     458:	dfc00117 	ldw	ra,4(sp)
     45c:	df000017 	ldw	fp,0(sp)
     460:	dec00204 	addi	sp,sp,8
     464:	f800283a 	ret

00000468 <MCP2515_changeBits>:
 * Input = reg_address
 * Input = mask
 * Inout = specify value
 * --------------------------------------------------------*/
void MCP2515_changeBits(unsigned char reg_address,unsigned char change_bits, unsigned char change_val)
{
     468:	defffa04 	addi	sp,sp,-24
     46c:	dfc00515 	stw	ra,20(sp)
     470:	df000415 	stw	fp,16(sp)
     474:	df000404 	addi	fp,sp,16
     478:	2807883a 	mov	r3,r5
     47c:	3005883a 	mov	r2,r6
     480:	e13ffd05 	stb	r4,-12(fp)
     484:	e0fffe05 	stb	r3,-8(fp)
     488:	e0bfff05 	stb	r2,-4(fp)

	unsigned char reg_val, temp;
	temp=change_bits & change_val;
     48c:	e0fffe03 	ldbu	r3,-8(fp)
     490:	e0bfff03 	ldbu	r2,-4(fp)
     494:	1884703a 	and	r2,r3,r2
     498:	e0bffc05 	stb	r2,-16(fp)
	reg_val=MCP2515_Read_Register(reg_address);
     49c:	e0bffd03 	ldbu	r2,-12(fp)
     4a0:	1009883a 	mov	r4,r2
     4a4:	00005d00 	call	5d0 <MCP2515_Read_Register>
     4a8:	e0bffc45 	stb	r2,-15(fp)
	reg_val=reg_val & 0x1F;
     4ac:	e0bffc43 	ldbu	r2,-15(fp)
     4b0:	108007cc 	andi	r2,r2,31
     4b4:	e0bffc45 	stb	r2,-15(fp)
	temp=temp|reg_val;
     4b8:	e0fffc03 	ldbu	r3,-16(fp)
     4bc:	e0bffc43 	ldbu	r2,-15(fp)
     4c0:	1884b03a 	or	r2,r3,r2
     4c4:	e0bffc05 	stb	r2,-16(fp)
	MCP2515_Write_Register(reg_address,temp);
     4c8:	e0fffd03 	ldbu	r3,-12(fp)
     4cc:	e0bffc03 	ldbu	r2,-16(fp)
     4d0:	1809883a 	mov	r4,r3
     4d4:	100b883a 	mov	r5,r2
     4d8:	00006e00 	call	6e0 <MCP2515_Write_Register>

}
     4dc:	e037883a 	mov	sp,fp
     4e0:	dfc00117 	ldw	ra,4(sp)
     4e4:	df000017 	ldw	fp,0(sp)
     4e8:	dec00204 	addi	sp,sp,8
     4ec:	f800283a 	ret

000004f0 <MCP2515_SetMode>:
	_CANSPI_MODE_CONFIG  			 0x80
 * Input = mode
 * Output =void
 * --------------------------------------------------------*/
void MCP2515_SetMode(unsigned char mode)
{
     4f0:	defffd04 	addi	sp,sp,-12
     4f4:	dfc00215 	stw	ra,8(sp)
     4f8:	df000115 	stw	fp,4(sp)
     4fc:	df000104 	addi	fp,sp,4
     500:	2005883a 	mov	r2,r4
     504:	e0bfff05 	stb	r2,-4(fp)

	MCP2515_changeBits(CANCTRL, (7 << REQOP0),(mode));
     508:	e0bfff03 	ldbu	r2,-4(fp)
     50c:	010003c4 	movi	r4,15
     510:	01403804 	movi	r5,224
     514:	100d883a 	mov	r6,r2
     518:	00004680 	call	468 <MCP2515_changeBits>
	while(getMode != (mode>>REQOP0)){
     51c:	00000506 	br	534 <MCP2515_SetMode+0x44>
		MCP2515_changeBits(CANCTRL, (7 << REQOP0),(mode));
     520:	e0bfff03 	ldbu	r2,-4(fp)
     524:	010003c4 	movi	r4,15
     528:	01403804 	movi	r5,224
     52c:	100d883a 	mov	r6,r2
     530:	00004680 	call	468 <MCP2515_changeBits>
 * --------------------------------------------------------*/
void MCP2515_SetMode(unsigned char mode)
{

	MCP2515_changeBits(CANCTRL, (7 << REQOP0),(mode));
	while(getMode != (mode>>REQOP0)){
     534:	01000384 	movi	r4,14
     538:	00005d00 	call	5d0 <MCP2515_Read_Register>
     53c:	10803fcc 	andi	r2,r2,255
     540:	1004d17a 	srli	r2,r2,5
     544:	1007883a 	mov	r3,r2
     548:	e0bfff03 	ldbu	r2,-4(fp)
     54c:	1004d17a 	srli	r2,r2,5
     550:	18c03fcc 	andi	r3,r3,255
     554:	10803fcc 	andi	r2,r2,255
     558:	18bff11e 	bne	r3,r2,520 <MCP2515_SetMode+0x30>
		MCP2515_changeBits(CANCTRL, (7 << REQOP0),(mode));
	}

}
     55c:	e037883a 	mov	sp,fp
     560:	dfc00117 	ldw	ra,4(sp)
     564:	df000017 	ldw	fp,0(sp)
     568:	dec00204 	addi	sp,sp,8
     56c:	f800283a 	ret

00000570 <MCP2515_Reset>:
 * This function reset SPI-CAN module.
 * Input = void
 * output = void
 * --------------------------------------------------------*/
void MCP2515_Reset()
{
     570:	defffb04 	addi	sp,sp,-20
     574:	dfc00415 	stw	ra,16(sp)
     578:	df000315 	stw	fp,12(sp)
     57c:	df000304 	addi	fp,sp,12

	write_data[0]= RESET_INSTRUCTION;
     580:	00800034 	movhi	r2,0
     584:	10859104 	addi	r2,r2,5700
     588:	00fff004 	movi	r3,-64
     58c:	10c00005 	stb	r3,0(r2)
	/* Send Reset Instruction */
	alt_avalon_spi_command((alt_u32)ALT_SPI_MASTER,
     590:	d8000015 	stw	zero,0(sp)
     594:	00800034 	movhi	r2,0
     598:	10859d84 	addi	r2,r2,5750
     59c:	d8800115 	stw	r2,4(sp)
     5a0:	d8000215 	stw	zero,8(sp)
     5a4:	01140804 	movi	r4,20512
     5a8:	000b883a 	mov	r5,zero
     5ac:	01800044 	movi	r6,1
     5b0:	01c00034 	movhi	r7,0
     5b4:	39c59104 	addi	r7,r7,5700
     5b8:	00013d80 	call	13d8 <alt_avalon_spi_command>
			0,1, write_data,0,
			read_data,0);

}
     5bc:	e037883a 	mov	sp,fp
     5c0:	dfc00117 	ldw	ra,4(sp)
     5c4:	df000017 	ldw	fp,0(sp)
     5c8:	dec00204 	addi	sp,sp,8
     5cc:	f800283a 	ret

000005d0 <MCP2515_Read_Register>:
 * reinitialize yourself and go to the configuration mode
 * Input = Read Register address
 * Output = content of the register
 * --------------------------------------------------------*/
tByte MCP2515_Read_Register(const tByte Register_address)
{
     5d0:	defff904 	addi	sp,sp,-28
     5d4:	dfc00615 	stw	ra,24(sp)
     5d8:	df000515 	stw	fp,20(sp)
     5dc:	df000504 	addi	fp,sp,20
     5e0:	2005883a 	mov	r2,r4
     5e4:	e0bfff05 	stb	r2,-4(fp)

	tByte Register_contents;
	/* Read Instruction */
	write_data[0]=READ_INSTRUCTION;
     5e8:	00800034 	movhi	r2,0
     5ec:	10859104 	addi	r2,r2,5700
     5f0:	00c000c4 	movi	r3,3
     5f4:	10c00005 	stb	r3,0(r2)
	write_data[1]=Register_address;
     5f8:	00800034 	movhi	r2,0
     5fc:	10859104 	addi	r2,r2,5700
     600:	e0ffff03 	ldbu	r3,-4(fp)
     604:	10c00045 	stb	r3,1(r2)

	alt_avalon_spi_command((alt_u32)ALT_SPI_MASTER,
     608:	00800044 	movi	r2,1
     60c:	d8800015 	stw	r2,0(sp)
     610:	00800034 	movhi	r2,0
     614:	10859d84 	addi	r2,r2,5750
     618:	d8800115 	stw	r2,4(sp)
     61c:	d8000215 	stw	zero,8(sp)
     620:	01140804 	movi	r4,20512
     624:	000b883a 	mov	r5,zero
     628:	01800084 	movi	r6,2
     62c:	01c00034 	movhi	r7,0
     630:	39c59104 	addi	r7,r7,5700
     634:	00013d80 	call	13d8 <alt_avalon_spi_command>
			0,2, write_data,1,
			read_data,0);
	Register_contents=read_data[0];
     638:	00800034 	movhi	r2,0
     63c:	10859d84 	addi	r2,r2,5750
     640:	10800003 	ldbu	r2,0(r2)
     644:	e0bffe05 	stb	r2,-8(fp)

	return Register_contents;
     648:	e0bffe03 	ldbu	r2,-8(fp)
}
     64c:	e037883a 	mov	sp,fp
     650:	dfc00117 	ldw	ra,4(sp)
     654:	df000017 	ldw	fp,0(sp)
     658:	dec00204 	addi	sp,sp,8
     65c:	f800283a 	ret

00000660 <MCP2515_Read_Rx_Buffer_Register>:
/*-------------MCP2515_Read_Rx_Buffer_Register-------------
 * Input = instruction
 * Output = content of the receive buffer register
 * --------------------------------------------------------*/
tByte MCP2515_Read_Rx_Buffer_Register(const tByte instruction)
{
     660:	defff904 	addi	sp,sp,-28
     664:	dfc00615 	stw	ra,24(sp)
     668:	df000515 	stw	fp,20(sp)
     66c:	df000504 	addi	fp,sp,20
     670:	2005883a 	mov	r2,r4
     674:	e0bfff05 	stb	r2,-4(fp)
	tByte Register_contents;
	/* Read Receive Buffer Instruction */
	write_data[0]=instruction;
     678:	00800034 	movhi	r2,0
     67c:	10859104 	addi	r2,r2,5700
     680:	e0ffff03 	ldbu	r3,-4(fp)
     684:	10c00005 	stb	r3,0(r2)

	alt_avalon_spi_command((alt_u32)ALT_SPI_MASTER,
     688:	00800044 	movi	r2,1
     68c:	d8800015 	stw	r2,0(sp)
     690:	00800034 	movhi	r2,0
     694:	10859d84 	addi	r2,r2,5750
     698:	d8800115 	stw	r2,4(sp)
     69c:	d8000215 	stw	zero,8(sp)
     6a0:	01140804 	movi	r4,20512
     6a4:	000b883a 	mov	r5,zero
     6a8:	01800044 	movi	r6,1
     6ac:	01c00034 	movhi	r7,0
     6b0:	39c59104 	addi	r7,r7,5700
     6b4:	00013d80 	call	13d8 <alt_avalon_spi_command>
			0,1, write_data,1,
			read_data,0);
	Register_contents=read_data[0];
     6b8:	00800034 	movhi	r2,0
     6bc:	10859d84 	addi	r2,r2,5750
     6c0:	10800003 	ldbu	r2,0(r2)
     6c4:	e0bffe05 	stb	r2,-8(fp)

	return Register_contents;
     6c8:	e0bffe03 	ldbu	r2,-8(fp)
}
     6cc:	e037883a 	mov	sp,fp
     6d0:	dfc00117 	ldw	ra,4(sp)
     6d4:	df000017 	ldw	fp,0(sp)
     6d8:	dec00204 	addi	sp,sp,8
     6dc:	f800283a 	ret

000006e0 <MCP2515_Write_Register>:
 * Input = Write Register contents
 * Output= void-------------------------------------------*/

void MCP2515_Write_Register(const tByte Register_address,
		const tByte Register_contents)
{
     6e0:	defff904 	addi	sp,sp,-28
     6e4:	dfc00615 	stw	ra,24(sp)
     6e8:	df000515 	stw	fp,20(sp)
     6ec:	df000504 	addi	fp,sp,20
     6f0:	2007883a 	mov	r3,r4
     6f4:	2805883a 	mov	r2,r5
     6f8:	e0fffe05 	stb	r3,-8(fp)
     6fc:	e0bfff05 	stb	r2,-4(fp)

	/* Read Receive Buffer Instruction */
	write_data[0]=WRITE_BYTE_INSTRUCTION;
     700:	00800034 	movhi	r2,0
     704:	10859104 	addi	r2,r2,5700
     708:	00c00084 	movi	r3,2
     70c:	10c00005 	stb	r3,0(r2)
	write_data[1]=Register_address;
     710:	00800034 	movhi	r2,0
     714:	10859104 	addi	r2,r2,5700
     718:	e0fffe03 	ldbu	r3,-8(fp)
     71c:	10c00045 	stb	r3,1(r2)
	write_data[2]=Register_contents;
     720:	00800034 	movhi	r2,0
     724:	10859104 	addi	r2,r2,5700
     728:	e0ffff03 	ldbu	r3,-4(fp)
     72c:	10c00085 	stb	r3,2(r2)

	alt_avalon_spi_command((alt_u32)ALT_SPI_MASTER,
     730:	d8000015 	stw	zero,0(sp)
     734:	00800034 	movhi	r2,0
     738:	10859d84 	addi	r2,r2,5750
     73c:	d8800115 	stw	r2,4(sp)
     740:	d8000215 	stw	zero,8(sp)
     744:	01140804 	movi	r4,20512
     748:	000b883a 	mov	r5,zero
     74c:	018000c4 	movi	r6,3
     750:	01c00034 	movhi	r7,0
     754:	39c59104 	addi	r7,r7,5700
     758:	00013d80 	call	13d8 <alt_avalon_spi_command>
			0,3, write_data,0,
			read_data,0);


}
     75c:	e037883a 	mov	sp,fp
     760:	dfc00117 	ldw	ra,4(sp)
     764:	df000017 	ldw	fp,0(sp)
     768:	dec00204 	addi	sp,sp,8
     76c:	f800283a 	ret

00000770 <MCP2515_RTS_TXB_Instruction_CMD>:
 * This function sends request for the transmission of data through
 * SPI-CAN module.
 * Input = tx_buffer_to_send, Transmit Buffer to send
 * Output= void-------------------------------------------*/
void MCP2515_RTS_TXB_Instruction_CMD(const tByte tx_buffer_to_send)
{
     770:	defffa04 	addi	sp,sp,-24
     774:	dfc00515 	stw	ra,20(sp)
     778:	df000415 	stw	fp,16(sp)
     77c:	df000404 	addi	fp,sp,16
     780:	2005883a 	mov	r2,r4
     784:	e0bfff05 	stb	r2,-4(fp)
	/* RTS Transmit Buffer Instruction */
	write_data[0]=tx_buffer_to_send;
     788:	00800034 	movhi	r2,0
     78c:	10859104 	addi	r2,r2,5700
     790:	e0ffff03 	ldbu	r3,-4(fp)
     794:	10c00005 	stb	r3,0(r2)
	alt_avalon_spi_command((alt_u32)ALT_SPI_MASTER,
     798:	d8000015 	stw	zero,0(sp)
     79c:	00800034 	movhi	r2,0
     7a0:	10859d84 	addi	r2,r2,5750
     7a4:	d8800115 	stw	r2,4(sp)
     7a8:	d8000215 	stw	zero,8(sp)
     7ac:	01140804 	movi	r4,20512
     7b0:	000b883a 	mov	r5,zero
     7b4:	01800044 	movi	r6,1
     7b8:	01c00034 	movhi	r7,0
     7bc:	39c59104 	addi	r7,r7,5700
     7c0:	00013d80 	call	13d8 <alt_avalon_spi_command>
			0,1, write_data,0,
			read_data,0);
}
     7c4:	e037883a 	mov	sp,fp
     7c8:	dfc00117 	ldw	ra,4(sp)
     7cc:	df000017 	ldw	fp,0(sp)
     7d0:	dec00204 	addi	sp,sp,8
     7d4:	f800283a 	ret

000007d8 <SCH_Init_T0>:

  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/
void SCH_Init_T0(void)
{
     7d8:	defffc04 	addi	sp,sp,-16
     7dc:	dfc00315 	stw	ra,12(sp)
     7e0:	df000215 	stw	fp,8(sp)
     7e4:	df000204 	addi	fp,sp,8
	tByte i;

	//--- CAN initialisation ---//
	MCP2515_Init();
     7e8:	00001f40 	call	1f4 <MCP2515_Init>

	for (i = 0; i < SCH_MAX_TASKS; i++)
     7ec:	e03fff05 	stb	zero,-4(fp)
     7f0:	00000606 	br	80c <SCH_Init_T0+0x34>
	{
		SCH_Delete_Task(i);
     7f4:	e0bfff03 	ldbu	r2,-4(fp)
     7f8:	1009883a 	mov	r4,r2
     7fc:	0000dc00 	call	dc0 <SCH_Delete_Task>
	tByte i;

	//--- CAN initialisation ---//
	MCP2515_Init();

	for (i = 0; i < SCH_MAX_TASKS; i++)
     800:	e0bfff03 	ldbu	r2,-4(fp)
     804:	10800044 	addi	r2,r2,1
     808:	e0bfff05 	stb	r2,-4(fp)
     80c:	e0bfff03 	ldbu	r2,-4(fp)
     810:	108000f0 	cmpltui	r2,r2,3
     814:	103ff71e 	bne	r2,zero,7f4 <SCH_Init_T0+0x1c>
	}

	// Reset the global error variable
	// - SCH_Delete_Task() will generate an error code,
	//   (because the task array is empty)
	Error_code_G = 0;
     818:	00800034 	movhi	r2,0
     81c:	10858b04 	addi	r2,r2,5676
     820:	10000005 	stb	zero,0(r2)

	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(MCP2551_int_n, 1);  //PIO_2_BASE for CAN Slave Interrupt
     824:	00c00044 	movi	r3,1
     828:	00941e04 	movi	r2,20600
     82c:	10c00035 	stwio	r3,0(r2)
	alt_ic_isr_register(0, PIO_2_IRQ, SCH_Update, (void*)&edge_capture, 0);
     830:	d8000015 	stw	zero,0(sp)
     834:	0009883a 	mov	r4,zero
     838:	01400084 	movi	r5,2
     83c:	01800034 	movhi	r6,0
     840:	31824c04 	addi	r6,r6,2352
     844:	d1e00404 	addi	r7,gp,-32752
     848:	00010240 	call	1024 <alt_ic_isr_register>
	//alt_printf("S_init\r\n");
}
     84c:	e037883a 	mov	sp,fp
     850:	dfc00117 	ldw	ra,4(sp)
     854:	df000017 	ldw	fp,0(sp)
     858:	dec00204 	addi	sp,sp,8
     85c:	f800283a 	ret

00000860 <SCH_Start>:

  NOTE: ONLY THE SCHEDULER INTERRUPT SHOULD BE ENABLED!!! 

-*------------------------------------------------------------------*/
void SCH_Start(void) 
{
     860:	defffd04 	addi	sp,sp,-12
     864:	dfc00215 	stw	ra,8(sp)
     868:	df000115 	stw	fp,4(sp)
     86c:	df000104 	addi	fp,sp,4
	// We can be at this point because:
	// 1. The network has just been powered up
	// 2. An error has occurred in the Master, and it is not generating ticks
	// 3. The network has been damaged and no ticks are being received by this slave
	//
	Start_slave = 0;
     870:	e03fff05 	stb	zero,-4(fp)
	SCH_Report_Status(); // Sch not yet running - do this manually
     874:	0000e880 	call	e88 <SCH_Report_Status>


	// Now wait (indefinitely) for appropriate signal from the master
	do {
		IOWR_ALTERA_AVALON_PIO_DATA(TEST_1_BASE,
     878:	00941804 	movi	r2,20576
     87c:	10800037 	ldwio	r2,0(r2)
     880:	10c0005c 	xori	r3,r2,1
     884:	00941804 	movi	r2,20576
     888:	10c00035 	stwio	r3,0(r2)
						         IORD_ALTERA_AVALON_PIO_DATA(TEST_1_BASE) ^ TEST1_pin);
		// Wait for CAN message to be received
		do {
			CAN_interrupt_flag = MCP2515_Read_Register(CANINTF);
     88c:	01000b04 	movi	r4,44
     890:	00005d00 	call	5d0 <MCP2515_Read_Register>
     894:	e0bfff45 	stb	r2,-3(fp)
		} while ((CAN_interrupt_flag & 0x02) == 0);
     898:	e0bfff43 	ldbu	r2,-3(fp)
     89c:	1080008c 	andi	r2,r2,2
     8a0:	103ffa26 	beq	r2,zero,88c <SCH_Start+0x2c>

		// Get the first two data bytes
		Tick_00 = MCP2515_Read_Register(RXBnDm(1,0)); // Get data byte 0, Buffer 1
     8a4:	01001d84 	movi	r4,118
     8a8:	00005d00 	call	5d0 <MCP2515_Read_Register>
     8ac:	e0bfff85 	stb	r2,-2(fp)
		Tick_ID = MCP2515_Read_Register(RXBnDm(1,1)); // Get data byte 1, Buffer 1
     8b0:	01001dc4 	movi	r4,119
     8b4:	00005d00 	call	5d0 <MCP2515_Read_Register>
     8b8:	e0bfffc5 	stb	r2,-1(fp)

		// We simply clear *ALL* flags here...
		MCP2515_Write_Register(CANINTF, 0x00);
     8bc:	01000b04 	movi	r4,44
     8c0:	000b883a 	mov	r5,zero
     8c4:	00006e00 	call	6e0 <MCP2515_Write_Register>

		if ((Tick_00 == 0x00) && (Tick_ID == SLAVE_ID))
     8c8:	e0bfff83 	ldbu	r2,-2(fp)
     8cc:	10000e1e 	bne	r2,zero,908 <SCH_Start+0xa8>
     8d0:	e0bfffc3 	ldbu	r2,-1(fp)
     8d4:	10800098 	cmpnei	r2,r2,2
     8d8:	10000b1e 	bne	r2,zero,908 <SCH_Start+0xa8>
		{
			// Message is correct
			Start_slave = 1;
     8dc:	00800044 	movi	r2,1
     8e0:	e0bfff05 	stb	r2,-4(fp)

			// Prepare Ack message for transmission to Master
			MCP2515_Write_Register(TXBnDm(0,0) , 0x00);      // Set data byte 0 (always 0x00)
     8e4:	01000d84 	movi	r4,54
     8e8:	000b883a 	mov	r5,zero
     8ec:	00006e00 	call	6e0 <MCP2515_Write_Register>
			MCP2515_Write_Register(TXBnDm(0,1) , SLAVE_ID);  // Slave ID
     8f0:	01000dc4 	movi	r4,55
     8f4:	01400084 	movi	r5,2
     8f8:	00006e00 	call	6e0 <MCP2515_Write_Register>

			/* Send RTS_TXB0_INSTRUCTION Instruction */
			MCP2515_RTS_TXB_Instruction_CMD(RTS_INSTRUCTION_TXB0 );
     8fc:	01002044 	movi	r4,129
     900:	00007700 	call	770 <MCP2515_RTS_TXB_Instruction_CMD>
     904:	00000106 	br	90c <SCH_Start+0xac>

		}
		else
		{
			// Not yet received correct message - wait
			Start_slave = 0;
     908:	e03fff05 	stb	zero,-4(fp)
		}
	} while (!Start_slave);
     90c:	e0bfff03 	ldbu	r2,-4(fp)
     910:	103fd926 	beq	r2,zero,878 <SCH_Start+0x18>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     914:	00800044 	movi	r2,1
     918:	1001703a 	wrctl	status,r2
	alt_irq_cpu_enable_interrupts(); //can move to down



}
     91c:	e037883a 	mov	sp,fp
     920:	dfc00117 	ldw	ra,4(sp)
     924:	df000017 	ldw	fp,0(sp)
     928:	dec00204 	addi	sp,sp,8
     92c:	f800283a 	ret

00000930 <SCH_Update>:
  This version is triggered by the interval timer interrupts:
  the timer is automatically reloaded.

-*------------------------------------------------------------------*/
void SCH_Update(void * context)
{
     930:	defffb04 	addi	sp,sp,-20
     934:	dfc00415 	stw	ra,16(sp)
     938:	df000315 	stw	fp,12(sp)
     93c:	df000304 	addi	fp,sp,12
     940:	e13fff15 	stw	r4,-4(fp)

	tByte Index;
	//Disable Interrupt for IO Port
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(MCP2551_int_n, 0);
     944:	0007883a 	mov	r3,zero
     948:	00941e04 	movi	r2,20600
     94c:	10c00035 	stwio	r3,0(r2)
	/* Cast context to edge_capture's type. It is important that this be
	 * declared volatile to avoid unwanted compiler optimization.
	 */
	volatile int* edge_capture_ptr = (volatile int*) context;
     950:	e0bfff17 	ldw	r2,-4(fp)
     954:	e0bffe15 	stw	r2,-8(fp)
	/* Store the value in the Button's edge capture register in *context. */
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(MCP2551_int_n);
     958:	00941f04 	movi	r2,20604
     95c:	10c00037 	ldwio	r3,0(r2)
     960:	e0bffe17 	ldw	r2,-8(fp)
     964:	10c00015 	stw	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(MCP2551_int_n,0);
     968:	0007883a 	mov	r3,zero
     96c:	00941f04 	movi	r2,20604
     970:	10c00035 	stwio	r3,0(r2)
	//Enable Interrupt for IO Port
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(MCP2551_int_n,1);
     974:	00c00044 	movi	r3,1
     978:	00941e04 	movi	r2,20600
     97c:	10c00035 	stwio	r3,0(r2)


	// Check tick data - send ack if necessary
	// NOTE: 'START' message will only be sent after a 'time out'
	if (SCC_A_SLAVE_Process_Tick_Message() == SLAVE_ID)
     980:	0000abc0 	call	abc <SCC_A_SLAVE_Process_Tick_Message>
     984:	10803fcc 	andi	r2,r2,255
     988:	10800098 	cmpnei	r2,r2,2
     98c:	1000011e 	bne	r2,zero,994 <SCH_Update+0x64>
	{
		SCC_A_SLAVE_Send_Ack_Message_To_Master();
     990:	0000b140 	call	b14 <SCC_A_SLAVE_Send_Ack_Message_To_Master>
	}

	// NOTE: calculations are in *TICKS* (not milliseconds)
	for (Index = 0; Index < SCH_MAX_TASKS; Index++)
     994:	e03ffd05 	stb	zero,-12(fp)
     998:	00004006 	br	a9c <SCH_Update+0x16c>
	{
		// Check if there is a task at this location
		if (SCH_tasks_G[Index].pTask)
     99c:	e0bffd03 	ldbu	r2,-12(fp)
     9a0:	00c00034 	movhi	r3,0
     9a4:	18c5aa04 	addi	r3,r3,5800
     9a8:	1004913a 	slli	r2,r2,4
     9ac:	1885883a 	add	r2,r3,r2
     9b0:	10800017 	ldw	r2,0(r2)
     9b4:	10003626 	beq	r2,zero,a90 <SCH_Update+0x160>
		{
			if (SCH_tasks_G[Index].Delay == 0)
     9b8:	e0bffd03 	ldbu	r2,-12(fp)
     9bc:	00c00034 	movhi	r3,0
     9c0:	18c5aa04 	addi	r3,r3,5800
     9c4:	1004913a 	slli	r2,r2,4
     9c8:	1885883a 	add	r2,r3,r2
     9cc:	10800104 	addi	r2,r2,4
     9d0:	10800017 	ldw	r2,0(r2)
     9d4:	10001f1e 	bne	r2,zero,a54 <SCH_Update+0x124>
			{
				// The task is due to run
				SCH_tasks_G[Index].RunMe = 1;  // Set the run flag
     9d8:	e0bffd03 	ldbu	r2,-12(fp)
     9dc:	00c00034 	movhi	r3,0
     9e0:	18c5aa04 	addi	r3,r3,5800
     9e4:	1004913a 	slli	r2,r2,4
     9e8:	1885883a 	add	r2,r3,r2
     9ec:	10800304 	addi	r2,r2,12
     9f0:	00c00044 	movi	r3,1
     9f4:	10c00005 	stb	r3,0(r2)

				if (SCH_tasks_G[Index].Period)
     9f8:	e0bffd03 	ldbu	r2,-12(fp)
     9fc:	00c00034 	movhi	r3,0
     a00:	18c5aa04 	addi	r3,r3,5800
     a04:	1004913a 	slli	r2,r2,4
     a08:	1885883a 	add	r2,r3,r2
     a0c:	10800204 	addi	r2,r2,8
     a10:	10800017 	ldw	r2,0(r2)
     a14:	10001e26 	beq	r2,zero,a90 <SCH_Update+0x160>
				{
					// Schedule periodic tasks to run again
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
     a18:	e0bffd03 	ldbu	r2,-12(fp)
     a1c:	e0fffd03 	ldbu	r3,-12(fp)
     a20:	01000034 	movhi	r4,0
     a24:	2105aa04 	addi	r4,r4,5800
     a28:	1806913a 	slli	r3,r3,4
     a2c:	20c7883a 	add	r3,r4,r3
     a30:	18c00204 	addi	r3,r3,8
     a34:	18c00017 	ldw	r3,0(r3)
     a38:	01000034 	movhi	r4,0
     a3c:	2105aa04 	addi	r4,r4,5800
     a40:	1004913a 	slli	r2,r2,4
     a44:	2085883a 	add	r2,r4,r2
     a48:	10800104 	addi	r2,r2,4
     a4c:	10c00015 	stw	r3,0(r2)
     a50:	00000f06 	br	a90 <SCH_Update+0x160>
				}
			}
			else
			{
				// Not yet ready to run: just decrement the delay
				SCH_tasks_G[Index].Delay -= 1;
     a54:	e0bffd03 	ldbu	r2,-12(fp)
     a58:	e0fffd03 	ldbu	r3,-12(fp)
     a5c:	01000034 	movhi	r4,0
     a60:	2105aa04 	addi	r4,r4,5800
     a64:	1806913a 	slli	r3,r3,4
     a68:	20c7883a 	add	r3,r4,r3
     a6c:	18c00104 	addi	r3,r3,4
     a70:	18c00017 	ldw	r3,0(r3)
     a74:	18ffffc4 	addi	r3,r3,-1
     a78:	01000034 	movhi	r4,0
     a7c:	2105aa04 	addi	r4,r4,5800
     a80:	1004913a 	slli	r2,r2,4
     a84:	2085883a 	add	r2,r4,r2
     a88:	10800104 	addi	r2,r2,4
     a8c:	10c00015 	stw	r3,0(r2)
	{
		SCC_A_SLAVE_Send_Ack_Message_To_Master();
	}

	// NOTE: calculations are in *TICKS* (not milliseconds)
	for (Index = 0; Index < SCH_MAX_TASKS; Index++)
     a90:	e0bffd03 	ldbu	r2,-12(fp)
     a94:	10800044 	addi	r2,r2,1
     a98:	e0bffd05 	stb	r2,-12(fp)
     a9c:	e0bffd03 	ldbu	r2,-12(fp)
     aa0:	108000f0 	cmpltui	r2,r2,3
     aa4:	103fbd1e 	bne	r2,zero,99c <SCH_Update+0x6c>
				SCH_tasks_G[Index].Delay -= 1;
			}
		}
	}
	//alt_printf("S_update\r\n");
}
     aa8:	e037883a 	mov	sp,fp
     aac:	dfc00117 	ldw	ra,4(sp)
     ab0:	df000017 	ldw	fp,0(sp)
     ab4:	dec00204 	addi	sp,sp,8
     ab8:	f800283a 	ret

00000abc <SCC_A_SLAVE_Process_Tick_Message>:
  The tick messages themselves may contain data.  These data are
  extracted in this function.

-*------------------------------------------------------------------*/
tByte SCC_A_SLAVE_Process_Tick_Message(void)
{
     abc:	defffd04 	addi	sp,sp,-12
     ac0:	dfc00215 	stw	ra,8(sp)
     ac4:	df000115 	stw	fp,4(sp)
     ac8:	df000104 	addi	fp,sp,4
	tByte Tick_ID;

	// Must have received a message (to generate the 'Tick')
	// The first byte is the ID of the slave for which the data are
	// intended
	Tick_ID = MCP2515_Read_Register(RXBnDm(1,0));   // Get data byte 0 (Slave ID)
     acc:	01001d84 	movi	r4,118
     ad0:	00005d00 	call	5d0 <MCP2515_Read_Register>
     ad4:	e0bfff05 	stb	r2,-4(fp)

	if (Tick_ID == SLAVE_ID)
     ad8:	e0bfff03 	ldbu	r2,-4(fp)
     adc:	10800098 	cmpnei	r2,r2,2
     ae0:	1000031e 	bne	r2,zero,af0 <SCC_A_SLAVE_Process_Tick_Message+0x34>
	{
		// Only if there is a match do we need to copy these fields
		Tick_message_data_G = MCP2515_Read_Register(RXBnDm(1,1));
     ae4:	01001dc4 	movi	r4,119
     ae8:	00005d00 	call	5d0 <MCP2515_Read_Register>
     aec:	d0a00305 	stb	r2,-32756(gp)
	}

	// Clear *ALL* flags ...
	MCP2515_Write_Register(CANINTF, 0x00);
     af0:	01000b04 	movi	r4,44
     af4:	000b883a 	mov	r5,zero
     af8:	00006e00 	call	6e0 <MCP2515_Write_Register>

	return Tick_ID;
     afc:	e0bfff03 	ldbu	r2,-4(fp)
}
     b00:	e037883a 	mov	sp,fp
     b04:	dfc00117 	ldw	ra,4(sp)
     b08:	df000017 	ldw	fp,0(sp)
     b0c:	dec00204 	addi	sp,sp,8
     b10:	f800283a 	ret

00000b14 <SCC_A_SLAVE_Send_Ack_Message_To_Master>:

  NOTE: Data transfer between slaves is NOT permitted!

-*------------------------------------------------------------------*/
void SCC_A_SLAVE_Send_Ack_Message_To_Master(void)
{
     b14:	defffe04 	addi	sp,sp,-8
     b18:	dfc00115 	stw	ra,4(sp)
     b1c:	df000015 	stw	fp,0(sp)
     b20:	d839883a 	mov	fp,sp


	// Prepare Ack message for transmission to Master

	// First byte of message must be slave ID
	MCP2515_Write_Register(TXBnDm(0,0), SLAVE_ID);
     b24:	01000d84 	movi	r4,54
     b28:	01400084 	movi	r5,2
     b2c:	00006e00 	call	6e0 <MCP2515_Write_Register>
	//Ack_message_data_G ='C';
	// Now the data
	MCP2515_Write_Register(TXBnDm(0,1) , Ack_message_data_G);
     b30:	00800034 	movhi	r2,0
     b34:	10858f04 	addi	r2,r2,5692
     b38:	10800003 	ldbu	r2,0(r2)
     b3c:	10803fcc 	andi	r2,r2,255
     b40:	01000dc4 	movi	r4,55
     b44:	100b883a 	mov	r5,r2
     b48:	00006e00 	call	6e0 <MCP2515_Write_Register>

	/* Send RTS_TXB0_INSTRUCTION Instruction */
	MCP2515_RTS_TXB_Instruction_CMD(RTS_INSTRUCTION_TXB0);
     b4c:	01002044 	movi	r4,129
     b50:	00007700 	call	770 <MCP2515_RTS_TXB_Instruction_CMD>

}
     b54:	e037883a 	mov	sp,fp
     b58:	dfc00117 	ldw	ra,4(sp)
     b5c:	df000017 	ldw	fp,0(sp)
     b60:	dec00204 	addi	sp,sp,8
     b64:	f800283a 	ret

00000b68 <alt_main>:

/* ............................................................... */
/* ............................................................... */

void alt_main(void)
   {
     b68:	defffe04 	addi	sp,sp,-8
     b6c:	dfc00115 	stw	ra,4(sp)
     b70:	df000015 	stw	fp,0(sp)
     b74:	d839883a 	mov	fp,sp
   // Set up the scheduler
   SCH_Init_T0();
     b78:	00007d80 	call	7d8 <SCH_Init_T0>

   // Prepare for the 'Flash_LED' task
   PushButton_Init();
     b7c:	0000f800 	call	f80 <PushButton_Init>
   LED_ONOFF_Init();
     b80:	0000f0c0 	call	f0c <LED_ONOFF_Init>
   HEARTBEAT_Init();
     b84:	0000ec00 	call	ec0 <HEARTBEAT_Init>

   // Add the 'Flash LED' task (on for ~1000 ms, off for ~1000 ms)
   // - timings are in ticks (50 ms tick interval)
   // (Max interval / delay is 65535 ticks)
   SCH_Add_Task(PushButton_Update, 2, 3);
     b88:	01000034 	movhi	r4,0
     b8c:	2103e704 	addi	r4,r4,3996
     b90:	01400084 	movi	r5,2
     b94:	018000c4 	movi	r6,3
     b98:	0000cc40 	call	cc4 <SCH_Add_Task>
   SCH_Add_Task(LED_ONOFF_Update, 5, 10);
     b9c:	01000034 	movhi	r4,0
     ba0:	2103ca04 	addi	r4,r4,3880
     ba4:	01400144 	movi	r5,5
     ba8:	01800284 	movi	r6,10
     bac:	0000cc40 	call	cc4 <SCH_Add_Task>
   SCH_Add_Task(HEARTBEAT_Update, 0, 20);
     bb0:	01000034 	movhi	r4,0
     bb4:	2103b704 	addi	r4,r4,3804
     bb8:	000b883a 	mov	r5,zero
     bbc:	01800504 	movi	r6,20
     bc0:	0000cc40 	call	cc4 <SCH_Add_Task>

   // Start the scheduler
   SCH_Start();
     bc4:	00008600 	call	860 <SCH_Start>

   while(1)
      {
      SCH_Dispatch_Tasks();
     bc8:	0000bd00 	call	bd0 <SCH_Dispatch_Tasks>
      }
     bcc:	003ffe06 	br	bc8 <alt_main+0x60>

00000bd0 <SCH_Dispatch_Tasks>:
  is due to run, SCH_Dispatch_Tasks() will run it.
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/
void SCH_Dispatch_Tasks(void) 
   {
     bd0:	defffd04 	addi	sp,sp,-12
     bd4:	dfc00215 	stw	ra,8(sp)
     bd8:	df000115 	stw	fp,4(sp)
     bdc:	df000104 	addi	fp,sp,4
   tByte Index;

   // Dispatches (runs) the next task (if one is ready)
   for (Index = 0; Index < SCH_MAX_TASKS; Index++)
     be0:	e03fff05 	stb	zero,-4(fp)
     be4:	00002d06 	br	c9c <SCH_Dispatch_Tasks+0xcc>
      {
      if (SCH_tasks_G[Index].RunMe > 0) 
     be8:	e0bfff03 	ldbu	r2,-4(fp)
     bec:	00c00034 	movhi	r3,0
     bf0:	18c5aa04 	addi	r3,r3,5800
     bf4:	1004913a 	slli	r2,r2,4
     bf8:	1885883a 	add	r2,r3,r2
     bfc:	10800304 	addi	r2,r2,12
     c00:	10800003 	ldbu	r2,0(r2)
     c04:	10803fcc 	andi	r2,r2,255
     c08:	10002126 	beq	r2,zero,c90 <SCH_Dispatch_Tasks+0xc0>
         {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
     c0c:	e0bfff03 	ldbu	r2,-4(fp)
     c10:	00c00034 	movhi	r3,0
     c14:	18c5aa04 	addi	r3,r3,5800
     c18:	1004913a 	slli	r2,r2,4
     c1c:	1885883a 	add	r2,r3,r2
     c20:	10800017 	ldw	r2,0(r2)
     c24:	103ee83a 	callr	r2

         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
     c28:	e0bfff03 	ldbu	r2,-4(fp)
     c2c:	e0ffff03 	ldbu	r3,-4(fp)
     c30:	01000034 	movhi	r4,0
     c34:	2105aa04 	addi	r4,r4,5800
     c38:	1806913a 	slli	r3,r3,4
     c3c:	20c7883a 	add	r3,r4,r3
     c40:	18c00304 	addi	r3,r3,12
     c44:	18c00003 	ldbu	r3,0(r3)
     c48:	18ffffc4 	addi	r3,r3,-1
     c4c:	01000034 	movhi	r4,0
     c50:	2105aa04 	addi	r4,r4,5800
     c54:	1004913a 	slli	r2,r2,4
     c58:	2085883a 	add	r2,r4,r2
     c5c:	10800304 	addi	r2,r2,12
     c60:	10c00005 	stb	r3,0(r2)

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if (SCH_tasks_G[Index].Period == 0)
     c64:	e0bfff03 	ldbu	r2,-4(fp)
     c68:	00c00034 	movhi	r3,0
     c6c:	18c5aa04 	addi	r3,r3,5800
     c70:	1004913a 	slli	r2,r2,4
     c74:	1885883a 	add	r2,r3,r2
     c78:	10800204 	addi	r2,r2,8
     c7c:	10800017 	ldw	r2,0(r2)
     c80:	1000031e 	bne	r2,zero,c90 <SCH_Dispatch_Tasks+0xc0>
            {
            SCH_Delete_Task(Index);
     c84:	e0bfff03 	ldbu	r2,-4(fp)
     c88:	1009883a 	mov	r4,r2
     c8c:	0000dc00 	call	dc0 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void) 
   {
   tByte Index;

   // Dispatches (runs) the next task (if one is ready)
   for (Index = 0; Index < SCH_MAX_TASKS; Index++)
     c90:	e0bfff03 	ldbu	r2,-4(fp)
     c94:	10800044 	addi	r2,r2,1
     c98:	e0bfff05 	stb	r2,-4(fp)
     c9c:	e0bfff03 	ldbu	r2,-4(fp)
     ca0:	108000f0 	cmpltui	r2,r2,3
     ca4:	103fd01e 	bne	r2,zero,be8 <SCH_Dispatch_Tasks+0x18>
            }
         }
      }

   // Report system status
   SCH_Report_Status();  
     ca8:	0000e880 	call	e88 <SCH_Report_Status>

   // The scheduler enters idle mode at this point 
   SCH_Go_To_Sleep();          
     cac:	0000ea40 	call	ea4 <SCH_Go_To_Sleep>
   }
     cb0:	e037883a 	mov	sp,fp
     cb4:	dfc00117 	ldw	ra,4(sp)
     cb8:	df000017 	ldw	fp,0(sp)
     cbc:	dec00204 	addi	sp,sp,8
     cc0:	f800283a 	ret

00000cc4 <SCH_Add_Task>:
 
-*------------------------------------------------------------------*/
tByte SCH_Add_Task(void (* pFunction)(),
                   const tWord DELAY, 
                   const tWord PERIOD)    
   {
     cc4:	defffb04 	addi	sp,sp,-20
     cc8:	df000415 	stw	fp,16(sp)
     ccc:	df000404 	addi	fp,sp,16
     cd0:	e13ffd15 	stw	r4,-12(fp)
     cd4:	e17ffe15 	stw	r5,-8(fp)
     cd8:	e1bfff15 	stw	r6,-4(fp)
   tByte Index = 0;
     cdc:	e03ffc05 	stb	zero,-16(fp)
   
   // First find a gap in the array (if there is one)
   while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
     ce0:	00000306 	br	cf0 <SCH_Add_Task+0x2c>
      {
      Index++;
     ce4:	e0bffc03 	ldbu	r2,-16(fp)
     ce8:	10800044 	addi	r2,r2,1
     cec:	e0bffc05 	stb	r2,-16(fp)
                   const tWord PERIOD)    
   {
   tByte Index = 0;
   
   // First find a gap in the array (if there is one)
   while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
     cf0:	e0bffc03 	ldbu	r2,-16(fp)
     cf4:	00c00034 	movhi	r3,0
     cf8:	18c5aa04 	addi	r3,r3,5800
     cfc:	1004913a 	slli	r2,r2,4
     d00:	1885883a 	add	r2,r3,r2
     d04:	10800017 	ldw	r2,0(r2)
     d08:	10000326 	beq	r2,zero,d18 <SCH_Add_Task+0x54>
     d0c:	e0bffc03 	ldbu	r2,-16(fp)
     d10:	108000f0 	cmpltui	r2,r2,3
     d14:	103ff31e 	bne	r2,zero,ce4 <SCH_Add_Task+0x20>
      {
      Index++;
      } 
   
   // Have we reached the end of the list?   
   if (Index == SCH_MAX_TASKS)
     d18:	e0bffc03 	ldbu	r2,-16(fp)
     d1c:	108000d8 	cmpnei	r2,r2,3
     d20:	1000041e 	bne	r2,zero,d34 <SCH_Add_Task+0x70>
      {
      // Task list is full
      //
      // Set the global error variable
      Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
     d24:	00800044 	movi	r2,1
     d28:	d0a00505 	stb	r2,-32748(gp)

      // Also return an error code
      return SCH_MAX_TASKS;  
     d2c:	008000c4 	movi	r2,3
     d30:	00001f06 	br	db0 <SCH_Add_Task+0xec>
      }
      
   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask  = pFunction;
     d34:	e0bffc03 	ldbu	r2,-16(fp)
     d38:	00c00034 	movhi	r3,0
     d3c:	18c5aa04 	addi	r3,r3,5800
     d40:	1004913a 	slli	r2,r2,4
     d44:	1885883a 	add	r2,r3,r2
     d48:	e0fffd17 	ldw	r3,-12(fp)
     d4c:	10c00015 	stw	r3,0(r2)
     
   SCH_tasks_G[Index].Delay  = DELAY;
     d50:	e0bffc03 	ldbu	r2,-16(fp)
     d54:	00c00034 	movhi	r3,0
     d58:	18c5aa04 	addi	r3,r3,5800
     d5c:	1004913a 	slli	r2,r2,4
     d60:	1885883a 	add	r2,r3,r2
     d64:	10800104 	addi	r2,r2,4
     d68:	e0fffe17 	ldw	r3,-8(fp)
     d6c:	10c00015 	stw	r3,0(r2)
   SCH_tasks_G[Index].Period = PERIOD;
     d70:	e0bffc03 	ldbu	r2,-16(fp)
     d74:	00c00034 	movhi	r3,0
     d78:	18c5aa04 	addi	r3,r3,5800
     d7c:	1004913a 	slli	r2,r2,4
     d80:	1885883a 	add	r2,r3,r2
     d84:	10800204 	addi	r2,r2,8
     d88:	e0ffff17 	ldw	r3,-4(fp)
     d8c:	10c00015 	stw	r3,0(r2)

   SCH_tasks_G[Index].RunMe  = 0;
     d90:	e0bffc03 	ldbu	r2,-16(fp)
     d94:	00c00034 	movhi	r3,0
     d98:	18c5aa04 	addi	r3,r3,5800
     d9c:	1004913a 	slli	r2,r2,4
     da0:	1885883a 	add	r2,r3,r2
     da4:	10800304 	addi	r2,r2,12
     da8:	10000005 	stb	zero,0(r2)

   return Index; // return position of task (to allow later deletion)
     dac:	e0bffc03 	ldbu	r2,-16(fp)
   }
     db0:	e037883a 	mov	sp,fp
     db4:	df000017 	ldw	fp,0(sp)
     db8:	dec00104 	addi	sp,sp,4
     dbc:	f800283a 	ret

00000dc0 <SCH_Delete_Task>:

  RETURN VALUE:  RETURN_ERROR or RETURN_NORMAL

-*------------------------------------------------------------------*/
tByte SCH_Delete_Task(const tByte TASK_INDEX)
   {
     dc0:	defffd04 	addi	sp,sp,-12
     dc4:	df000215 	stw	fp,8(sp)
     dc8:	df000204 	addi	fp,sp,8
     dcc:	2005883a 	mov	r2,r4
     dd0:	e0bfff05 	stb	r2,-4(fp)
	tByte Return_code;

   if (SCH_tasks_G[TASK_INDEX].pTask == 0)
     dd4:	e0bfff03 	ldbu	r2,-4(fp)
     dd8:	00c00034 	movhi	r3,0
     ddc:	18c5aa04 	addi	r3,r3,5800
     de0:	1004913a 	slli	r2,r2,4
     de4:	1885883a 	add	r2,r3,r2
     de8:	10800017 	ldw	r2,0(r2)
     dec:	1000051e 	bne	r2,zero,e04 <SCH_Delete_Task+0x44>
      {
      // No task at this location...
      //
      // Set the global error variable
      Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
     df0:	00800084 	movi	r2,2
     df4:	d0a00505 	stb	r2,-32748(gp)

      // ...also return an error code
      Return_code = RETURN_ERROR;
     df8:	00800044 	movi	r2,1
     dfc:	e0bffe05 	stb	r2,-8(fp)
     e00:	00000106 	br	e08 <SCH_Delete_Task+0x48>
      }
   else
      {
      Return_code = RETURN_NORMAL;
     e04:	e03ffe05 	stb	zero,-8(fp)
      }      
   
   SCH_tasks_G[TASK_INDEX].pTask   = 0x0000;
     e08:	e0bfff03 	ldbu	r2,-4(fp)
     e0c:	00c00034 	movhi	r3,0
     e10:	18c5aa04 	addi	r3,r3,5800
     e14:	1004913a 	slli	r2,r2,4
     e18:	1885883a 	add	r2,r3,r2
     e1c:	10000015 	stw	zero,0(r2)
   SCH_tasks_G[TASK_INDEX].Delay   = 0;
     e20:	e0bfff03 	ldbu	r2,-4(fp)
     e24:	00c00034 	movhi	r3,0
     e28:	18c5aa04 	addi	r3,r3,5800
     e2c:	1004913a 	slli	r2,r2,4
     e30:	1885883a 	add	r2,r3,r2
     e34:	10800104 	addi	r2,r2,4
     e38:	10000015 	stw	zero,0(r2)
   SCH_tasks_G[TASK_INDEX].Period  = 0;
     e3c:	e0bfff03 	ldbu	r2,-4(fp)
     e40:	00c00034 	movhi	r3,0
     e44:	18c5aa04 	addi	r3,r3,5800
     e48:	1004913a 	slli	r2,r2,4
     e4c:	1885883a 	add	r2,r3,r2
     e50:	10800204 	addi	r2,r2,8
     e54:	10000015 	stw	zero,0(r2)

   SCH_tasks_G[TASK_INDEX].RunMe   = 0;
     e58:	e0bfff03 	ldbu	r2,-4(fp)
     e5c:	00c00034 	movhi	r3,0
     e60:	18c5aa04 	addi	r3,r3,5800
     e64:	1004913a 	slli	r2,r2,4
     e68:	1885883a 	add	r2,r3,r2
     e6c:	10800304 	addi	r2,r2,12
     e70:	10000005 	stb	zero,0(r2)

   return Return_code;       // return status
     e74:	e0bffe03 	ldbu	r2,-8(fp)
   }
     e78:	e037883a 	mov	sp,fp
     e7c:	df000017 	ldw	fp,0(sp)
     e80:	dec00104 	addi	sp,sp,4
     e84:	f800283a 	ret

00000e88 <SCH_Report_Status>:

  See Chapter 10 for further information.

-*------------------------------------------------------------------*/
void SCH_Report_Status(void)
   {
     e88:	deffff04 	addi	sp,sp,-4
     e8c:	df000015 	stw	fp,0(sp)
     e90:	d839883a 	mov	fp,sp
            Error_code_G = 0; // Reset error code
            }
         }
      }
#endif
   }
     e94:	e037883a 	mov	sp,fp
     e98:	df000017 	ldw	fp,0(sp)
     e9c:	dec00104 	addi	sp,sp,4
     ea0:	f800283a 	ret

00000ea4 <SCH_Go_To_Sleep>:

  *** ADAPT AS REQUIRED FOR YOUR HARDWARE ***

-*------------------------------------------------------------------*/
void SCH_Go_To_Sleep()
   {
     ea4:	deffff04 	addi	sp,sp,-4
     ea8:	df000015 	stw	fp,0(sp)
     eac:	d839883a 	mov	fp,sp
   // Do nothing
   }
     eb0:	e037883a 	mov	sp,fp
     eb4:	df000017 	ldw	fp,0(sp)
     eb8:	dec00104 	addi	sp,sp,4
     ebc:	f800283a 	ret

00000ec0 <HEARTBEAT_Init>:

  - See below.

-*------------------------------------------------------------------*/
void HEARTBEAT_Init(void)
   {
     ec0:	deffff04 	addi	sp,sp,-4
     ec4:	df000015 	stw	fp,0(sp)
     ec8:	d839883a 	mov	fp,sp
//	Tick_message_data_G = 1;
   // Do nothing
   }
     ecc:	e037883a 	mov	sp,fp
     ed0:	df000017 	ldw	fp,0(sp)
     ed4:	dec00104 	addi	sp,sp,4
     ed8:	f800283a 	ret

00000edc <HEARTBEAT_Update>:
  flash (on for 0.5 seconds, off for 0.5 seconds) must schedule
  at 2 Hz.

-*------------------------------------------------------------------*/
void HEARTBEAT_Update(void)
   {
     edc:	deffff04 	addi	sp,sp,-4
     ee0:	df000015 	stw	fp,0(sp)
     ee4:	d839883a 	mov	fp,sp
   // Change the LED from OFF to ON (or vice versa)
   IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,
     ee8:	00942404 	movi	r2,20624
     eec:	10800037 	ldwio	r2,0(r2)
     ef0:	10c0021c 	xori	r3,r2,8
     ef4:	00942404 	movi	r2,20624
     ef8:	10c00035 	stwio	r3,0(r2)
         IORD_ALTERA_AVALON_PIO_DATA(LED_BASE) ^ LED3_pin);

//   Tick_message_data_G = IORD_ALTERA_AVALON_PIO_DATA(LED_BASE) ^ LED3_pin;
   }
     efc:	e037883a 	mov	sp,fp
     f00:	df000017 	ldw	fp,0(sp)
     f04:	dec00104 	addi	sp,sp,4
     f08:	f800283a 	ret

00000f0c <LED_ONOFF_Init>:

  - See below.

-*------------------------------------------------------------------*/
void LED_ONOFF_Init(void)
   {
     f0c:	deffff04 	addi	sp,sp,-4
     f10:	df000015 	stw	fp,0(sp)
     f14:	d839883a 	mov	fp,sp
   // Do nothing
   }
     f18:	e037883a 	mov	sp,fp
     f1c:	df000017 	ldw	fp,0(sp)
     f20:	dec00104 	addi	sp,sp,4
     f24:	f800283a 	ret

00000f28 <LED_ONOFF_Update>:
  flash (on for 0.5 seconds, off for 0.5 seconds) must schedule
  at 2 Hz.

-*------------------------------------------------------------------*/
void LED_ONOFF_Update(void)
   {
     f28:	deffff04 	addi	sp,sp,-4
     f2c:	df000015 	stw	fp,0(sp)
     f30:	d839883a 	mov	fp,sp
   
	if (Tick_message_data_G == 0xAA) //Sw_pressed_G == 1)
     f34:	00800034 	movhi	r2,0
     f38:	10858904 	addi	r2,r2,5668
     f3c:	10800003 	ldbu	r2,0(r2)
     f40:	10803fcc 	andi	r2,r2,255
     f44:	10802a98 	cmpnei	r2,r2,170
     f48:	1000061e 	bne	r2,zero,f64 <LED_ONOFF_Update+0x3c>
		{
		// Change the LED from OFF to ON (or vice versa)
		IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,
     f4c:	00942404 	movi	r2,20624
     f50:	10800037 	ldwio	r2,0(r2)
     f54:	10c0005c 	xori	r3,r2,1
     f58:	00942404 	movi	r2,20624
     f5c:	10c00035 	stwio	r3,0(r2)
     f60:	00000306 	br	f70 <LED_ONOFF_Update+0x48>
									IORD_ALTERA_AVALON_PIO_DATA(LED_BASE) ^ LED0_pin);
		}
	else
	{
		// Change the LED from OFF to ON (or vice versa)
		IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0);
     f64:	0007883a 	mov	r3,zero
     f68:	00942404 	movi	r2,20624
     f6c:	10c00035 	stwio	r3,0(r2)
	}

   }
     f70:	e037883a 	mov	sp,fp
     f74:	df000017 	ldw	fp,0(sp)
     f78:	dec00104 	addi	sp,sp,4
     f7c:	f800283a 	ret

00000f80 <PushButton_Init>:

  - See below.

-*------------------------------------------------------------------*/
void PushButton_Init(void)
   {
     f80:	deffff04 	addi	sp,sp,-4
     f84:	df000015 	stw	fp,0(sp)
     f88:	d839883a 	mov	fp,sp
   // Do nothing
   }
     f8c:	e037883a 	mov	sp,fp
     f90:	df000017 	ldw	fp,0(sp)
     f94:	dec00104 	addi	sp,sp,4
     f98:	f800283a 	ret

00000f9c <PushButton_Update>:

  LED_Flash_Update()

-*------------------------------------------------------------------*/
void PushButton_Update(void)
   {
     f9c:	deffff04 	addi	sp,sp,-4
     fa0:	df000015 	stw	fp,0(sp)
     fa4:	d839883a 	mov	fp,sp
//         IORD_ALTERA_AVALON_PIO_DATA(LED_BASE) ^ LED_pin);
		 
   static unsigned int Duration;

   // Read "reset count" switch input (pb0)
   pb0_input = IORD_ALTERA_AVALON_PIO_DATA(KEY_0_BASE);
     fa8:	00941404 	movi	r2,20560
     fac:	10800037 	ldwio	r2,0(r2)
     fb0:	d0a00705 	stb	r2,-32740(gp)
   
   if (pb0_input == SW_PRESSED)
     fb4:	d0a00703 	ldbu	r2,-32740(gp)
     fb8:	10803fcc 	andi	r2,r2,255
     fbc:	1000111e 	bne	r2,zero,1004 <PushButton_Update+0x68>
      {
      Duration += 1;
     fc0:	d0a00817 	ldw	r2,-32736(gp)
     fc4:	10800044 	addi	r2,r2,1
     fc8:	d0a00815 	stw	r2,-32736(gp)

      if (Duration > SW_THRES)
     fcc:	d0a00817 	ldw	r2,-32736(gp)
     fd0:	10800130 	cmpltui	r2,r2,4
     fd4:	1000071e 	bne	r2,zero,ff4 <PushButton_Update+0x58>
         {
         Duration = SW_THRES;
     fd8:	008000c4 	movi	r2,3
     fdc:	d0a00815 	stw	r2,-32736(gp)

         Sw_pressed_G = 1;  // Switch is pressed...
     fe0:	00800044 	movi	r2,1
     fe4:	d0a00615 	stw	r2,-32744(gp)
         Ack_message_data_G = 0xAA;
     fe8:	00bfea84 	movi	r2,-86
     fec:	d0a00905 	stb	r2,-32732(gp)
         return;
     ff0:	00000806 	br	1014 <PushButton_Update+0x78>
         }

      // Switch pressed, but not yet for long enough
      Sw_pressed_G = 0;
     ff4:	d0200615 	stw	zero,-32744(gp)
      Ack_message_data_G = 'C';
     ff8:	008010c4 	movi	r2,67
     ffc:	d0a00905 	stb	r2,-32732(gp)
      return; 
    1000:	00000406 	br	1014 <PushButton_Update+0x78>
      }
    
   // Switch not pressed - reset the count
   Duration = 0;
    1004:	d0200815 	stw	zero,-32736(gp)
   Sw_pressed_G = 0;  // Switch not pressed...
    1008:	d0200615 	stw	zero,-32744(gp)
   Ack_message_data_G = 'C';
    100c:	008010c4 	movi	r2,67
    1010:	d0a00905 	stb	r2,-32732(gp)
		 
   }
    1014:	e037883a 	mov	sp,fp
    1018:	df000017 	ldw	fp,0(sp)
    101c:	dec00104 	addi	sp,sp,4
    1020:	f800283a 	ret

00001024 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    1024:	defff904 	addi	sp,sp,-28
    1028:	dfc00615 	stw	ra,24(sp)
    102c:	df000515 	stw	fp,20(sp)
    1030:	df000504 	addi	fp,sp,20
    1034:	e13ffc15 	stw	r4,-16(fp)
    1038:	e17ffd15 	stw	r5,-12(fp)
    103c:	e1bffe15 	stw	r6,-8(fp)
    1040:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    1044:	e0800217 	ldw	r2,8(fp)
    1048:	d8800015 	stw	r2,0(sp)
    104c:	e13ffc17 	ldw	r4,-16(fp)
    1050:	e17ffd17 	ldw	r5,-12(fp)
    1054:	e1bffe17 	ldw	r6,-8(fp)
    1058:	e1ffff17 	ldw	r7,-4(fp)
    105c:	00011fc0 	call	11fc <alt_iic_isr_register>
}  
    1060:	e037883a 	mov	sp,fp
    1064:	dfc00117 	ldw	ra,4(sp)
    1068:	df000017 	ldw	fp,0(sp)
    106c:	dec00204 	addi	sp,sp,8
    1070:	f800283a 	ret

00001074 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    1074:	defff904 	addi	sp,sp,-28
    1078:	df000615 	stw	fp,24(sp)
    107c:	df000604 	addi	fp,sp,24
    1080:	e13ffe15 	stw	r4,-8(fp)
    1084:	e17fff15 	stw	r5,-4(fp)
    1088:	e0bfff17 	ldw	r2,-4(fp)
    108c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1090:	0005303a 	rdctl	r2,status
    1094:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1098:	e0fffb17 	ldw	r3,-20(fp)
    109c:	00bfff84 	movi	r2,-2
    10a0:	1884703a 	and	r2,r3,r2
    10a4:	1001703a 	wrctl	status,r2
  
  return context;
    10a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    10ac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    10b0:	e0bffa17 	ldw	r2,-24(fp)
    10b4:	00c00044 	movi	r3,1
    10b8:	1884983a 	sll	r2,r3,r2
    10bc:	1007883a 	mov	r3,r2
    10c0:	00800034 	movhi	r2,0
    10c4:	10859004 	addi	r2,r2,5696
    10c8:	10800017 	ldw	r2,0(r2)
    10cc:	1886b03a 	or	r3,r3,r2
    10d0:	00800034 	movhi	r2,0
    10d4:	10859004 	addi	r2,r2,5696
    10d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    10dc:	00800034 	movhi	r2,0
    10e0:	10859004 	addi	r2,r2,5696
    10e4:	10800017 	ldw	r2,0(r2)
    10e8:	100170fa 	wrctl	ienable,r2
    10ec:	e0bffc17 	ldw	r2,-16(fp)
    10f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    10f4:	e0bffd17 	ldw	r2,-12(fp)
    10f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    10fc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    1100:	e037883a 	mov	sp,fp
    1104:	df000017 	ldw	fp,0(sp)
    1108:	dec00104 	addi	sp,sp,4
    110c:	f800283a 	ret

00001110 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    1110:	defff904 	addi	sp,sp,-28
    1114:	df000615 	stw	fp,24(sp)
    1118:	df000604 	addi	fp,sp,24
    111c:	e13ffe15 	stw	r4,-8(fp)
    1120:	e17fff15 	stw	r5,-4(fp)
    1124:	e0bfff17 	ldw	r2,-4(fp)
    1128:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    112c:	0005303a 	rdctl	r2,status
    1130:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1134:	e0fffb17 	ldw	r3,-20(fp)
    1138:	00bfff84 	movi	r2,-2
    113c:	1884703a 	and	r2,r3,r2
    1140:	1001703a 	wrctl	status,r2
  
  return context;
    1144:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1148:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    114c:	e0bffa17 	ldw	r2,-24(fp)
    1150:	00c00044 	movi	r3,1
    1154:	1884983a 	sll	r2,r3,r2
    1158:	0084303a 	nor	r2,zero,r2
    115c:	1007883a 	mov	r3,r2
    1160:	00800034 	movhi	r2,0
    1164:	10859004 	addi	r2,r2,5696
    1168:	10800017 	ldw	r2,0(r2)
    116c:	1886703a 	and	r3,r3,r2
    1170:	00800034 	movhi	r2,0
    1174:	10859004 	addi	r2,r2,5696
    1178:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    117c:	00800034 	movhi	r2,0
    1180:	10859004 	addi	r2,r2,5696
    1184:	10800017 	ldw	r2,0(r2)
    1188:	100170fa 	wrctl	ienable,r2
    118c:	e0bffc17 	ldw	r2,-16(fp)
    1190:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1194:	e0bffd17 	ldw	r2,-12(fp)
    1198:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    119c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    11a0:	e037883a 	mov	sp,fp
    11a4:	df000017 	ldw	fp,0(sp)
    11a8:	dec00104 	addi	sp,sp,4
    11ac:	f800283a 	ret

000011b0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    11b0:	defffc04 	addi	sp,sp,-16
    11b4:	df000315 	stw	fp,12(sp)
    11b8:	df000304 	addi	fp,sp,12
    11bc:	e13ffe15 	stw	r4,-8(fp)
    11c0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    11c4:	000530fa 	rdctl	r2,ienable
    11c8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    11cc:	e0bfff17 	ldw	r2,-4(fp)
    11d0:	00c00044 	movi	r3,1
    11d4:	1884983a 	sll	r2,r3,r2
    11d8:	1007883a 	mov	r3,r2
    11dc:	e0bffd17 	ldw	r2,-12(fp)
    11e0:	1884703a 	and	r2,r3,r2
    11e4:	1004c03a 	cmpne	r2,r2,zero
    11e8:	10803fcc 	andi	r2,r2,255
}
    11ec:	e037883a 	mov	sp,fp
    11f0:	df000017 	ldw	fp,0(sp)
    11f4:	dec00104 	addi	sp,sp,4
    11f8:	f800283a 	ret

000011fc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    11fc:	defff504 	addi	sp,sp,-44
    1200:	dfc00a15 	stw	ra,40(sp)
    1204:	df000915 	stw	fp,36(sp)
    1208:	df000904 	addi	fp,sp,36
    120c:	e13ffc15 	stw	r4,-16(fp)
    1210:	e17ffd15 	stw	r5,-12(fp)
    1214:	e1bffe15 	stw	r6,-8(fp)
    1218:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    121c:	00bffa84 	movi	r2,-22
    1220:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    1224:	e0bffd17 	ldw	r2,-12(fp)
    1228:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    122c:	e0bff817 	ldw	r2,-32(fp)
    1230:	10800808 	cmpgei	r2,r2,32
    1234:	1000271e 	bne	r2,zero,12d4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1238:	0005303a 	rdctl	r2,status
    123c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1240:	e0fffa17 	ldw	r3,-24(fp)
    1244:	00bfff84 	movi	r2,-2
    1248:	1884703a 	and	r2,r3,r2
    124c:	1001703a 	wrctl	status,r2
  
  return context;
    1250:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    1254:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    1258:	00c00034 	movhi	r3,0
    125c:	18c5b604 	addi	r3,r3,5848
    1260:	e0bff817 	ldw	r2,-32(fp)
    1264:	100490fa 	slli	r2,r2,3
    1268:	1885883a 	add	r2,r3,r2
    126c:	e0fffe17 	ldw	r3,-8(fp)
    1270:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    1274:	00c00034 	movhi	r3,0
    1278:	18c5b604 	addi	r3,r3,5848
    127c:	e0bff817 	ldw	r2,-32(fp)
    1280:	100490fa 	slli	r2,r2,3
    1284:	1885883a 	add	r2,r3,r2
    1288:	10800104 	addi	r2,r2,4
    128c:	e0ffff17 	ldw	r3,-4(fp)
    1290:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    1294:	e0bffe17 	ldw	r2,-8(fp)
    1298:	10000526 	beq	r2,zero,12b0 <alt_iic_isr_register+0xb4>
    129c:	e0bff817 	ldw	r2,-32(fp)
    12a0:	e13ffc17 	ldw	r4,-16(fp)
    12a4:	100b883a 	mov	r5,r2
    12a8:	00010740 	call	1074 <alt_ic_irq_enable>
    12ac:	00000406 	br	12c0 <alt_iic_isr_register+0xc4>
    12b0:	e0bff817 	ldw	r2,-32(fp)
    12b4:	e13ffc17 	ldw	r4,-16(fp)
    12b8:	100b883a 	mov	r5,r2
    12bc:	00011100 	call	1110 <alt_ic_irq_disable>
    12c0:	e0bff715 	stw	r2,-36(fp)
    12c4:	e0bff917 	ldw	r2,-28(fp)
    12c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    12cc:	e0bffb17 	ldw	r2,-20(fp)
    12d0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    12d4:	e0bff717 	ldw	r2,-36(fp)
}
    12d8:	e037883a 	mov	sp,fp
    12dc:	dfc00117 	ldw	ra,4(sp)
    12e0:	df000017 	ldw	fp,0(sp)
    12e4:	dec00204 	addi	sp,sp,8
    12e8:	f800283a 	ret

000012ec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    12ec:	defffc04 	addi	sp,sp,-16
    12f0:	df000315 	stw	fp,12(sp)
    12f4:	df000304 	addi	fp,sp,12
    12f8:	e13ffd15 	stw	r4,-12(fp)
    12fc:	e17ffe15 	stw	r5,-8(fp)
    1300:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    1304:	e0fffe17 	ldw	r3,-8(fp)
    1308:	e0bffd17 	ldw	r2,-12(fp)
    130c:	18800e26 	beq	r3,r2,1348 <alt_load_section+0x5c>
  {
    while( to != end )
    1310:	00000a06 	br	133c <alt_load_section+0x50>
    {
      *to++ = *from++;
    1314:	e0bffd17 	ldw	r2,-12(fp)
    1318:	10c00017 	ldw	r3,0(r2)
    131c:	e0bffe17 	ldw	r2,-8(fp)
    1320:	10c00015 	stw	r3,0(r2)
    1324:	e0bffe17 	ldw	r2,-8(fp)
    1328:	10800104 	addi	r2,r2,4
    132c:	e0bffe15 	stw	r2,-8(fp)
    1330:	e0bffd17 	ldw	r2,-12(fp)
    1334:	10800104 	addi	r2,r2,4
    1338:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    133c:	e0fffe17 	ldw	r3,-8(fp)
    1340:	e0bfff17 	ldw	r2,-4(fp)
    1344:	18bff31e 	bne	r3,r2,1314 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    1348:	e037883a 	mov	sp,fp
    134c:	df000017 	ldw	fp,0(sp)
    1350:	dec00104 	addi	sp,sp,4
    1354:	f800283a 	ret

00001358 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1358:	defffe04 	addi	sp,sp,-8
    135c:	dfc00115 	stw	ra,4(sp)
    1360:	df000015 	stw	fp,0(sp)
    1364:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    1368:	01000034 	movhi	r4,0
    136c:	21058704 	addi	r4,r4,5660
    1370:	01400034 	movhi	r5,0
    1374:	29458604 	addi	r5,r5,5656
    1378:	01800034 	movhi	r6,0
    137c:	31858704 	addi	r6,r6,5660
    1380:	00012ec0 	call	12ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    1384:	01000034 	movhi	r4,0
    1388:	21000804 	addi	r4,r4,32
    138c:	01400034 	movhi	r5,0
    1390:	29400804 	addi	r5,r5,32
    1394:	01800034 	movhi	r6,0
    1398:	31806e04 	addi	r6,r6,440
    139c:	00012ec0 	call	12ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    13a0:	01000034 	movhi	r4,0
    13a4:	21058604 	addi	r4,r4,5656
    13a8:	01400034 	movhi	r5,0
    13ac:	29458604 	addi	r5,r5,5656
    13b0:	01800034 	movhi	r6,0
    13b4:	31858604 	addi	r6,r6,5656
    13b8:	00012ec0 	call	12ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    13bc:	00015e00 	call	15e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    13c0:	00015fc0 	call	15fc <alt_icache_flush_all>
}
    13c4:	e037883a 	mov	sp,fp
    13c8:	dfc00117 	ldw	ra,4(sp)
    13cc:	df000017 	ldw	fp,0(sp)
    13d0:	dec00204 	addi	sp,sp,8
    13d4:	f800283a 	ret

000013d8 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    13d8:	defff404 	addi	sp,sp,-48
    13dc:	df000b15 	stw	fp,44(sp)
    13e0:	df000b04 	addi	fp,sp,44
    13e4:	e13ffc15 	stw	r4,-16(fp)
    13e8:	e17ffd15 	stw	r5,-12(fp)
    13ec:	e1bffe15 	stw	r6,-8(fp)
    13f0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    13f4:	e0ffff17 	ldw	r3,-4(fp)
    13f8:	e0bffe17 	ldw	r2,-8(fp)
    13fc:	1885883a 	add	r2,r3,r2
    1400:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
    1404:	e0c00217 	ldw	r3,8(fp)
    1408:	e0800117 	ldw	r2,4(fp)
    140c:	1885883a 	add	r2,r3,r2
    1410:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
    1414:	e0800117 	ldw	r2,4(fp)
    1418:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
    141c:	e0bffe17 	ldw	r2,-8(fp)
    1420:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    1424:	00800044 	movi	r2,1
    1428:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    142c:	e0bffc17 	ldw	r2,-16(fp)
    1430:	10800504 	addi	r2,r2,20
    1434:	e0fffd17 	ldw	r3,-12(fp)
    1438:	01000044 	movi	r4,1
    143c:	20c6983a 	sll	r3,r4,r3
    1440:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    1444:	e0800317 	ldw	r2,12(fp)
    1448:	1080008c 	andi	r2,r2,2
    144c:	1000041e 	bne	r2,zero,1460 <alt_avalon_spi_command+0x88>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    1450:	e0bffc17 	ldw	r2,-16(fp)
    1454:	10800304 	addi	r2,r2,12
    1458:	00c10004 	movi	r3,1024
    145c:	10c00035 	stwio	r3,0(r2)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    1460:	e0bffc17 	ldw	r2,-16(fp)
    1464:	10800037 	ldwio	r2,0(r2)
    1468:	00000106 	br	1470 <alt_avalon_spi_command+0x98>

      if (read_ignore == 0 && read_data == read_end)
        break;
    }
    
  }
    146c:	0001883a 	nop
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    1470:	e0bffc17 	ldw	r2,-16(fp)
    1474:	10800204 	addi	r2,r2,8
    1478:	10800037 	ldwio	r2,0(r2)
    147c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    1480:	e0bffa17 	ldw	r2,-24(fp)
    1484:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    1488:	10000226 	beq	r2,zero,1494 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    148c:	e0bff717 	ldw	r2,-36(fp)
    1490:	1000031e 	bne	r2,zero,14a0 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    1494:	e0bffa17 	ldw	r2,-24(fp)
    1498:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    149c:	103ff426 	beq	r2,zero,1470 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    14a0:	e0bffa17 	ldw	r2,-24(fp)
    14a4:	1080100c 	andi	r2,r2,64
    14a8:	10001e26 	beq	r2,zero,1524 <alt_avalon_spi_command+0x14c>
    14ac:	e0bff717 	ldw	r2,-36(fp)
    14b0:	00801c0e 	bge	zero,r2,1524 <alt_avalon_spi_command+0x14c>
    {
      credits--;
    14b4:	e0bff717 	ldw	r2,-36(fp)
    14b8:	10bfffc4 	addi	r2,r2,-1
    14bc:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
    14c0:	e0ffff17 	ldw	r3,-4(fp)
    14c4:	e0bff817 	ldw	r2,-32(fp)
    14c8:	18800a2e 	bgeu	r3,r2,14f4 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    14cc:	e0bffc17 	ldw	r2,-16(fp)
    14d0:	10800104 	addi	r2,r2,4
    14d4:	e0ffff17 	ldw	r3,-4(fp)
    14d8:	18c00003 	ldbu	r3,0(r3)
    14dc:	18c03fcc 	andi	r3,r3,255
    14e0:	e13fff17 	ldw	r4,-4(fp)
    14e4:	21000044 	addi	r4,r4,1
    14e8:	e13fff15 	stw	r4,-4(fp)
    14ec:	10c00035 	stwio	r3,0(r2)
    14f0:	00000c06 	br	1524 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
    14f4:	e0bff517 	ldw	r2,-44(fp)
    14f8:	10000826 	beq	r2,zero,151c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
    14fc:	e0bff517 	ldw	r2,-44(fp)
    1500:	10bfffc4 	addi	r2,r2,-1
    1504:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    1508:	e0bffc17 	ldw	r2,-16(fp)
    150c:	10800104 	addi	r2,r2,4
    1510:	0007883a 	mov	r3,zero
    1514:	10c00035 	stwio	r3,0(r2)
    1518:	00000206 	br	1524 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
    151c:	00bf0004 	movi	r2,-1024
    1520:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    1524:	e0bffa17 	ldw	r2,-24(fp)
    1528:	1080200c 	andi	r2,r2,128
    152c:	103fcf26 	beq	r2,zero,146c <alt_avalon_spi_command+0x94>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    1530:	e0bffc17 	ldw	r2,-16(fp)
    1534:	10800037 	ldwio	r2,0(r2)
    1538:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
    153c:	e0bff617 	ldw	r2,-40(fp)
    1540:	10000426 	beq	r2,zero,1554 <alt_avalon_spi_command+0x17c>
        read_ignore--;
    1544:	e0bff617 	ldw	r2,-40(fp)
    1548:	10bfffc4 	addi	r2,r2,-1
    154c:	e0bff615 	stw	r2,-40(fp)
    1550:	00000706 	br	1570 <alt_avalon_spi_command+0x198>
      else
        *read_data++ = (alt_u8)rxdata;
    1554:	e0bffb17 	ldw	r2,-20(fp)
    1558:	1007883a 	mov	r3,r2
    155c:	e0800217 	ldw	r2,8(fp)
    1560:	10c00005 	stb	r3,0(r2)
    1564:	e0800217 	ldw	r2,8(fp)
    1568:	10800044 	addi	r2,r2,1
    156c:	e0800215 	stw	r2,8(fp)
      credits++;
    1570:	e0bff717 	ldw	r2,-36(fp)
    1574:	10800044 	addi	r2,r2,1
    1578:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
    157c:	e0bff617 	ldw	r2,-40(fp)
    1580:	103fba1e 	bne	r2,zero,146c <alt_avalon_spi_command+0x94>
    1584:	e0c00217 	ldw	r3,8(fp)
    1588:	e0bff917 	ldw	r2,-28(fp)
    158c:	18bfb71e 	bne	r3,r2,146c <alt_avalon_spi_command+0x94>
        break;
    1590:	0001883a 	nop
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    1594:	e0bffc17 	ldw	r2,-16(fp)
    1598:	10800204 	addi	r2,r2,8
    159c:	10800037 	ldwio	r2,0(r2)
    15a0:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    15a4:	e0bffa17 	ldw	r2,-24(fp)
    15a8:	1080080c 	andi	r2,r2,32
    15ac:	103ff926 	beq	r2,zero,1594 <alt_avalon_spi_command+0x1bc>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    15b0:	e0800317 	ldw	r2,12(fp)
    15b4:	1080004c 	andi	r2,r2,1
    15b8:	1000041e 	bne	r2,zero,15cc <alt_avalon_spi_command+0x1f4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    15bc:	e0bffc17 	ldw	r2,-16(fp)
    15c0:	10800304 	addi	r2,r2,12
    15c4:	0007883a 	mov	r3,zero
    15c8:	10c00035 	stwio	r3,0(r2)

  return read_length;
    15cc:	e0800117 	ldw	r2,4(fp)
}
    15d0:	e037883a 	mov	sp,fp
    15d4:	df000017 	ldw	fp,0(sp)
    15d8:	dec00104 	addi	sp,sp,4
    15dc:	f800283a 	ret

000015e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    15e0:	deffff04 	addi	sp,sp,-4
    15e4:	df000015 	stw	fp,0(sp)
    15e8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    15ec:	e037883a 	mov	sp,fp
    15f0:	df000017 	ldw	fp,0(sp)
    15f4:	dec00104 	addi	sp,sp,4
    15f8:	f800283a 	ret

000015fc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    15fc:	deffff04 	addi	sp,sp,-4
    1600:	df000015 	stw	fp,0(sp)
    1604:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    1608:	e037883a 	mov	sp,fp
    160c:	df000017 	ldw	fp,0(sp)
    1610:	dec00104 	addi	sp,sp,4
    1614:	f800283a 	ret
