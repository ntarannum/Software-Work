/**
 * Voter
 *	
 * Program which handles the clients
 *
 * @author nt161
 * @version $Id: Voter.java 26-04-18 nt161 $
 *
 */

package CO2017.exercise3.nt161;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;

/**
 * Class representing communication from client side
 */

public class Voter {
	// data sent by client
	private static char client_vote; // the client's vote
	private static int client_vid; // the client's voter ID
	private static int client_bnum; // the client's ballot number

	// The values that are generated by the server.
	private static char server_vote; // the server's vote
	private static int server_vid; // the server's voter ID
	private static int server_bnum; // the server's ballot number

	// port and server address for the command line arguments
	private static int port;
	private static String serverAddress;

	public static void main (String args[]) throws IOException{
		// the first command line argument is the server address
		serverAddress = args[0];
		// the second command line argument is the port
		port = Integer.valueOf(args[1]); 

		String line_fromServer ; // line received from the server
		String[] cl_s_comm; // communication array between server and client
		String server_message; // final message from the server

		// creating a new socket which is listening to the server 
		try(Socket server = new Socket(serverAddress, port);){
			// buffered reader that reads input from the server
			BufferedReader in = new BufferedReader(new InputStreamReader(server.getInputStream()));
			// writer that sends information to the server
			Writer server_out = new OutputStreamWriter(server.getOutputStream());
			// another buffered reader that reads data entered by client
			BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));
			
			// prints out that the connection to the server has been established
			System.out.println("Connected to "+ server.getInetAddress());
			// asks the client to enter voter ID
			System.out.print("Enter voter ID: ");
			// saves the value of the client's voter ID
			client_vid = Integer.parseInt(stdin.readLine());
			// sends the client id to the server
			server_out.write(client_vid + "\r\n");
			server_out.flush();

			// if the client voter ID is not equal to 0
			if (0 != client_vid){
				// then the server response is read by the client
				line_fromServer = in.readLine();
				// this ensures that the message received is split into separate chunks
				// using the colon as a delimiter
				cl_s_comm = line_fromServer.split(":");
				// the first value received from the server is the voter id
				server_vid = Integer.valueOf(cl_s_comm[0]);
				// the second value is the client ballot number
				client_bnum = Integer.valueOf(cl_s_comm[1]);
				// the last value is the message from the server
				server_message = cl_s_comm[2];

				// if the server message is equal to DUPLICATE
				if (server_message.equals("DUPLICATE")){
					// prints out the client voter ID and an error message
					System.out.println(client_vid + " voter already voted : VOTE REJECTED.");
					// closes the server
					server.close();
				}
				// if the server message is equal to INVALID_VID i.e. invalid voter ID
				else if (server_message.equals("INVALID_VID")){
					// prints out the client voter ID and an error message
					System.out.println(client_vid + " invalid voter : VOTE REJECTED.");
					// closes the server
					server.close();
				}  
				else {
					// otherwise prints out the client voter id and ballot number
					System.out.println(client_vid + ":" + client_bnum);
				}
				// this ensures that as long as the line does not reach 0:END
				// the client continues to listen to the socket and
				// prints the information sent from the server
				// this is for the ballot paper
				while(!(line_fromServer = in.readLine()).equals("0:END")){
					System.out.println(line_fromServer);
				}
				// client is asked to enter vote
				System.out.println("Enter vote: ");
				// client's vote is stored
				client_vote = stdin.readLine().charAt(0);
				// the client voter ID, ballot number and vote are sent to the server
				server_out.write(client_vid + ":" + client_bnum + ":" + client_vote + "\r\n");
				server_out.flush();

				line_fromServer = in.readLine(); // again the server information is read by the client
				cl_s_comm = line_fromServer.split(":"); // using the colon as a delimiter
				server_vid = Integer.valueOf( cl_s_comm[0]); // 
				server_bnum = Integer.valueOf(cl_s_comm[1]); // 
				server_vote = cl_s_comm[2].charAt(0); // 
				String  validation_message =  cl_s_comm[3]; // 

				// if the server message says ABORT
				// then an error message is displayed and the server is closed
				if (validation_message.equals("ABORT")){
					System.out.println("Invalid vote");
					server.close();
				}

				// if however there is no discrepancy between client and server values then the vote is processed
				if ( client_vid == server_vid && client_bnum == server_bnum && client_vote == server_vote && validation_message.equals("OK")){
					System.out.println("Vote processed");
				}
			}
		}
		catch (SocketException se){
			System.out.println("client disconnected");
		}
		catch (UnknownHostException ue){
			System.out.println("invalid address");
		}
		catch (NullPointerException ne){
			System.err.println(ne);
		}
		catch (NumberFormatException ne){
			System.out.println("Invalid format");
			System.out.println("Connection disconnected");
		}
	}
}













