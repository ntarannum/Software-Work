1) Run 2N copies of the process strictly sequentially
the command that was run is given below:
/usr/bin/time -o ~/CO2017/Exercise1/output1.txt -v parallel -j1 ssh-keygen -G /tmp/mods-{}.candidate -b 768 ::: {1..8}
When this command is run, 1 core is being used for 8 instances of the ssh-keygen sequentially
a) The overall turnaround time is 8:52.43 seconds
b) The overall CPU usage is 99%.
The time taken per process: 66.50 seconds (taking into account of the user time only)

2) Run N copies of the process concurrently, and then run another N copies of the process concurrently (this is the default behaviour of parallel).
the command that was run is given below:
/usr/bin/time -o ~/CO2017/Exercise1/output2.txt -v parallel ssh-keygen -G /tmp/mods-{}.candidate -b 768 ::: {1..8}
4 cores are being used for4 instances and repeats this again of the ssh-keygen in parallel
a) The overall turnaround time is 2:22.49 seconds
b) The overall CPU usage is 394%.
The time taken per process: 70.33 seconds (taking into account of the user time only)

3) Run all 2N copies of the process concurrently.
the command that was run is given below:
/usr/bin/time -o ~/CO2017/Exercise1/output3.txt -v parallel -j8 ssh-keygen -G /tmp/mods-{}.candidate -b 768 ::: {1..8}
8 cores are being used for 8 instances of the ssh-keygen in parallel however, as there are only 4 cores the maximum CPU usage is restricted to 396% (nearly 400%).
4 cores being used with 50% of the cpu being used.
a) The overall turnaround time is 2:21.87
b) The overall CPU usage is 396%.
The time taken per process: 70.37 seconds (taking into account of the user time only)

The overall turn around time was the least for 3 because it had the highest CPU utilisation although for 2 the turnaround was only about 1 second longer.
This is because for 2 and 3 the same command is essentially being run. This is because there are only a maximum of 4 cores and although the jobs option is set to 8, which means 8 cores are to be used to run 8 instances of the ssh-keygen.
The number of cores used will only be 4 as that is the maximum.

The overall CPU utilisation is the most for 2 and 3 this is because they are doing exactly the same thing.

More context switching is going on in 3 compared to 2, but it is a very small thing to be detected.

Impact on other processes is the least for 1 because this is using only one core.
